// Gora DAO Staking Smart Contract
// Version 1
// Website: https://www.gora.io/
// Creators: @emg110.algo
// Github: https://github.com/GoraNetwork/gora-dao-smartcontracts
/////////////////////////////////////////////////////////////////

#pragma version 8

//Check TXN first
callsub sub_check_txn

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
txn ApplicationID
int 0
!=
&&
bnz branch_delete

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
txn ApplicationID
int 0
!=
&&
bnz branch_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz branch_error

// Checks the number of application args , if 0 then no method it is
txn NumAppArgs
int 0
==
bz branch_method_router
b branch_error

///////////////////////////////////////////
branch_delete:

	callsub sub_check_owner_auth
	int 1
	return

branch_closeout:

	callsub sub_check_owner_auth
	int 1
	return

///////////////////////////////////////////
branch_method_router:

	method "create_staking(application,uint64,uint64,address,address,string,string)address"
	txn ApplicationArgs 0
	==
	txn ApplicationID
	int 0
	==
	&&
	bnz method_create_staking

	method "update_staking(application,uint64,uint64,address,address,string,string)address"
	txn ApplicationArgs 0
	==
	bnz method_update_staking

	method "config_staking(pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),string,string,string,string,uint64,address,address,address,string,string,address,uint64,uint64)uint64"
	txn ApplicationArgs 0
	==
	bnz method_config_staking

	method "update_manager_address(pay,byte[],byte[])string"
	txn ApplicationArgs 0
	==
	bnz method_update_manager_address

	method "activate_staking()uint64"
	txn ApplicationArgs 0
	==
	bnz method_activate_staking

	// method "optin_staking(uint64)uint64"
	// txn ApplicationArgs 0
	// ==
	// bnz method_optin_staking

	// method "staking_participate(pay,axfer,pay,axfer)uint64"
	// txn ApplicationArgs 0
	// ==
	// bnz method_staking_participate

    // method "staking_withdraw_participate()uint64"
	// txn ApplicationArgs 0
	// ==
	// bnz method_staking_withdraw_participate

	// method "staking_stake(uint64)uint64"
	// txn ApplicationArgs 0
	// ==
	// bnz method_staking_stake

	// method "staking_unstake(uint64)uint64"
	// txn ApplicationArgs 0
	// ==
	// bnz method_staking_unstake

	b branch_error

///////////////////////////////////////////
// Subroutine to handle transaction checks
sub_check_txn:

	// Checks RekeyTo address transaction field to be empty (ZeroAddress)
	txn RekeyTo
	global ZeroAddress
	==
	assert

	// Checks CloseRemainderTo address transaction field to be empty (ZeroAddress)
	txn CloseRemainderTo
	global ZeroAddress
	==
	assert

	// Checks AssetCloseTo address transaction field to be empty (ZeroAddress)
	txn AssetCloseTo
	global ZeroAddress
	==
	assert

	// Check transaction type to be application call
	txn TypeEnum
	int appl
	==
	bz branch_error

	// Checking transaction fee
	txn Fee
	global MinTxnFee
	>=
	assert
	retsub

// Checks owner address authentication
sub_check_owner_auth:

	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// Checks manager address authentication
sub_check_manager_auth:
	txn Sender
	byte "manager_address"
	app_global_get
	==
	assert
	retsub
	

// Handles creation of Staking contract
method_create_staking:

	global CurrentApplicationID
	store 0

	txn ApplicationArgs 1
	btoi
	store 1
	byte "dao_app_id"
	load 1
	app_global_put


	txn ApplicationArgs 2
	btoi
	store 2
	byte "dao_asset_id"
	load 2
	app_global_put

	txn ApplicationArgs 3
	btoi
	store 3
	byte "staking_asset_id"
	load 3
	app_global_put

	txn ApplicationArgs 4
	store 4
	byte "manager_address"
	load 4
	app_global_put

	txn ApplicationArgs 5
	store 5
	byte "dao_manager_address"
	load 5
	app_global_put

	txn ApplicationArgs 6
	store 6
	byte "staking_name"
	load 6
	app_global_put

	txn ApplicationArgs 7
	store 7
	byte "staking_description"
	load 7
	app_global_put

	byte "stakings_count"
	int 0
	app_global_put

	byte "staking_is_activated"
	int 0
	app_global_put

	byte "staked_amount_algo"
	int 0
	app_global_put

	byte "staked_amount"
	int 0
	app_global_put




branch_finalize_create_staking:
	byte 0x151f7c75
	global CurrentApplicationAddress
	concat
	b branch_log_return

// Handles updating of Staking contract
method_update_staking:
	//byte "staking_is_activated"
	//app_global_get
	//int 1
	//!=
	//assert

	global CurrentApplicationID
	store 0

	txn ApplicationArgs 1
	btoi
	store 1
	byte "dao_app_id"
	load 1
	app_global_put

	txn ApplicationArgs 2
	btoi
	store 2
	byte "dao_asset_id"
	load 2
	app_global_put

	txn ApplicationArgs 3
	btoi
	store 3
	byte "staking_asset_id"
	load 3
	app_global_put

	txn ApplicationArgs 4
	store 4
	byte "manager_address"
	load 4
	app_global_put

	txn ApplicationArgs 5
	store 5
	byte "dao_manager_address"
	load 5
	app_global_put

	txn ApplicationArgs 6
	store 6
	byte "staking_name"
	load 6
	app_global_put

	txn ApplicationArgs 7
	store 7
	byte "staking_description"
	load 7
	app_global_put

	byte 0x151f7c75
	global CurrentApplicationAddress
	concat
	b branch_log_return

// Handles updating of a staking contract manager address
method_update_manager_address:
	callsub sub_check_manager_auth

	txn ApplicationArgs 1
	byte "manager_address"
	app_global_put

	byte 0x151f7c75
	byte "Staking manager address is now updated!"
	concat
	b branch_log_return

// Handles activation of Staking
method_activate_staking:
	callsub sub_check_manager_auth
	byte "staking_is_activated"
	int 1
	app_global_put

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

// Handles configuration of Staking
method_config_staking:
	byte "participation_count"
	app_global_del

	byte "manager_address"
	txn Sender
	app_global_put
	
	gtxn 0 TypeEnum
	int pay
	==
	bz branch_error

	gtxn 0 Amount
	int 3000
	>=
	assert

	gtxn 0 Receiver
	global CurrentApplicationAddress
	==
	assert

	txn ApplicationArgs 1 
	store 0

	load 0
	int 0
	extract_uint64 //staking_min_algo
	store 1
	byte "staking_min_algo"
	load 1
	app_global_put
	//log

	load 0
	int 8
	extract_uint64 //staking_min_token
	store 2
	byte "staking_min_token"
	load 2
	app_global_put
	//log

	load 0
	int 16
	extract_uint64 //staking_duration
	store 3
	byte "staking_duration"
	load 3
	app_global_put
	//log

	load 0
	int 24
	extract_uint64 //staking_min_duration
	store 4
	byte "staking_min_duration"
	load 4
	app_global_put
	//log

	load 0
	int 32
	extract_uint64 //staking_commission_percentage
	store 5
	byte "staking_commission_percentage"
	load 5
	app_global_put
	//log

	load 0
	int 40
	extract_uint64 //staking_commission_percentage_algo
	store 6
	byte "staking_commission_percentage_algo"
	load 6
	app_global_put
	//log

	load 0
	int 48
	extract_uint64 //staking_fee_token
	store 7
	byte "staking_fee_token"
	load 7
	app_global_put
	//log

	load 0
	int 56
	extract_uint64 //staking_fee_algo
	store 8
	byte "staking_fee_algo"
	load 8
	app_global_put
	//log

	load 0
	int 64
	extract_uint64 //staking_incentives_percentage
	store 9
	byte "staking_incentives_percentage"
	load 9
	app_global_put
	//log

	load 0
	int 72
	extract_uint64 //staking_incentives_percentage_algo
	store 26
	byte "staking_incentives_percentage_algo"
	load 26
	app_global_put
	//log

	load 0
	int 80
	extract_uint64 //staking_type
	store 10
	byte "staking_type"
	load 10
	app_global_put
	//log

	load 0
	int 88
	extract_uint64 //staking_incentives_duration
	store 11
	byte "staking_incentives_duration"
	load 11
	app_global_put
	//log

	load 0
	int 96
	extract_uint64 //staking_return_percentage
	store 12
	byte "staking_return_percentage"
	load 12
	app_global_put
	//log

	load 0
	int 104
	extract_uint64 //staking_return_percentage_algo
	store 13
	byte "staking_return_percentage"
	load 13
	app_global_put
	//log

	load 0
	int 112
	extract_uint64 //staking_proxy_app_is_whitelisted
	store 24
	byte "staking_proxy_app_is_whitelisted"
	load 24
	app_global_put
	//log

	load 0
	int 120
	extract_uint64 //staking_proxy_app_is_pending
	store 25
	byte "staking_proxy_app_is_pending"
	load 25
	app_global_put
	//log

	load 0
	int 128
	extract_uint64 //staking_incentives_eligibility
	store 27
	byte "staking_incentives_eligibility"
	load 27
	app_global_put
	//log

	txn ApplicationArgs 2 //staking_name
	store 14
	byte "staking_name"
	load 14
	app_global_put
	//log

	txn ApplicationArgs 3 //staking_description
	store 15
	byte "staking_description"
	load 15
	app_global_put
	//log

	txn ApplicationArgs 4 //staking_url
	store 16
	byte "staking_url"
	load 16
	app_global_put
	//log

	txn ApplicationArgs 5 //staking_banner
	store 17
	byte "staking_banner"
	load 17
	app_global_put
	//log

	txn ApplicationArgs 6 //staking_proxy_app_id
	btoi
	store 18
	byte "staking_proxy_app_id"
	load 18
	app_global_put
	//log

	txn ApplicationArgs 7 //staking_proxy_app_address
	store 19
	byte "staking_proxy_app_address"
	load 19
	app_global_put
	//log

	txn ApplicationArgs 8 //staking_proxy_app_creator
	store 20
	byte "staking_proxy_app_creator"
	load 20
	app_global_put
	//log

	txn ApplicationArgs 9 //staking_proxy_app_manager
	store 21
	byte "staking_proxy_app_manager"
	load 21
	app_global_put
	//log

	txn ApplicationArgs 10 //staking_proxy_app_created_at
	store 22
	byte "staking_proxy_app_created_at"
	load 22
	app_global_put
	//log

	txn ApplicationArgs 11 //staking_proxy_app_updated_at
	store 23
	byte "staking_proxy_app_updated_at"
	load 23
	app_global_put
	//log

	txn ApplicationArgs 12 //staking_proxy_participating_address
	store 26
	byte "staking_proxy_participating_address"
	load 26
	app_global_put

	txn ApplicationArgs 13 //proxy_staking_vesting_app_id
	btoi
	byte "proxy_staking_vesting_app_id"
	swap
	app_global_put

	txn ApplicationArgs 14 //proxy_staking_main_app_id
	btoi
	byte "proxy_staking_main_app_id"
	swap
	app_global_put

	itxn_begin
	global CurrentApplicationAddress
	itxn_field Sender
	int axfer
	itxn_field TypeEnum
	global CurrentApplicationAddress
	itxn_field AssetReceiver
	int 0
	itxn_field AssetAmount
	txna Assets 1
	itxn_field XferAsset
	itxn_submit
	itxn TxID
    log

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

// method_optin_staking:
// 	itxn_begin
// 	global CurrentApplicationAddress
// 	itxn_field Sender
// 	int appl
// 	itxn_field TypeEnum
// 	int NoOp
// 	itxn_field OnCompletion

// 	method "opt_in(uint64)void"
// 	itxn_field ApplicationArgs
// 	txn Applications 2
// 	itxn_field ApplicationID
// 	txn ApplicationArgs 1
// 	itxn_field ApplicationArgs
// 	itxn_submit
// 	byte 0x151f7c75
// 	txn ApplicationArgs 1
// 	concat
// 	b branch_log_return

// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
branch_log_return:
	log
	int 1
	return

branch_error:
	err
branch_error_activation:
	err

