#pragma version 8
intcblock 0 1 32 4 576
bytecblock 0x 0x6d61 0x00 0x6d7873 0x6d6e7466 0x6d787466 0x01 0xb3b80c39a0d48da5ca41c6fdc0ecc6706b28c22c45d6ad8f6351c990ac353785 0x02
txn NumAppArgs
intc_0 // 0
==
bnz main_l22
txna ApplicationArgs 0
pushbytes 0xa8d36585 // "create(address,uint64,uint64,uint64)void"
==
bnz main_l21
txna ApplicationArgs 0
pushbytes 0xa8febdb1 // "update_time_constraints(uint64,uint64,uint64)void"
==
bnz main_l20
txna ApplicationArgs 0
pushbytes 0x04edf7c7 // "update_manager_address(address)void"
==
bnz main_l19
txna ApplicationArgs 0
pushbytes 0x3c197d18 // "optin_asset(pay,asset,application,address)void"
==
bnz main_l18
txna ApplicationArgs 0
pushbytes 0x58763d91 // "vest_tokens(pay,axfer,address,uint64,uint64)void"
==
bnz main_l17
txna ApplicationArgs 0
pushbytes 0xcb968c95 // "claim_vesting(account,asset)void"
==
bnz main_l16
txna ApplicationArgs 0
pushbytes 0x8ad487c2 // "stake_to_delegator(application,address,application,asset,account)void"
==
bnz main_l15
txna ApplicationArgs 0
pushbytes 0x757a7f32 // "withdraw_from_delegator(application,address,application,asset,account)void"
==
bnz main_l14
txna ApplicationArgs 0
pushbytes 0x76ef2184 // "add_whitelisted_app(pay,application)void"
==
bnz main_l13
txna ApplicationArgs 0
pushbytes 0x5d3fa23b // "remove_whitelisted_app(application)void"
==
bnz main_l12
err
main_l12:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub removewhitelistedapp_19
intc_1 // 1
return
main_l13:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 29
txn GroupIndex
intc_1 // 1
-
store 28
load 28
gtxns TypeEnum
intc_1 // pay
==
assert
load 28
load 29
callsub addwhitelistedapp_18
intc_1 // 1
return
main_l14:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 23
txna ApplicationArgs 2
store 24
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 25
txna ApplicationArgs 4
intc_0 // 0
getbyte
store 26
txna ApplicationArgs 5
intc_0 // 0
getbyte
store 27
load 23
load 24
load 25
load 26
load 27
callsub withdrawfromdelegator_17
intc_1 // 1
return
main_l15:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 18
txna ApplicationArgs 2
store 19
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 20
txna ApplicationArgs 4
intc_0 // 0
getbyte
store 21
txna ApplicationArgs 5
intc_0 // 0
getbyte
store 22
load 18
load 19
load 20
load 21
load 22
callsub staketodelegator_16
intc_1 // 1
return
main_l16:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 16
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 17
load 16
load 17
callsub claimvesting_15
intc_1 // 1
return
main_l17:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
store 13
txna ApplicationArgs 2
btoi
store 14
txna ApplicationArgs 3
btoi
store 15
txn GroupIndex
pushint 2 // 2
-
store 11
load 11
gtxns TypeEnum
intc_1 // pay
==
assert
txn GroupIndex
intc_1 // 1
-
store 12
load 12
gtxns TypeEnum
intc_3 // axfer
==
assert
load 11
load 12
load 13
load 14
load 15
callsub vesttokens_14
intc_1 // 1
return
main_l18:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 8
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 9
txna ApplicationArgs 3
store 10
txn GroupIndex
intc_1 // 1
-
store 7
load 7
gtxns TypeEnum
intc_1 // pay
==
assert
load 7
load 8
load 9
load 10
callsub optinasset_13
intc_1 // 1
return
main_l19:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub updatemanageraddress_12
intc_1 // 1
return
main_l20:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 4
txna ApplicationArgs 2
btoi
store 5
txna ApplicationArgs 3
btoi
store 6
load 4
load 5
load 6
callsub updatetimeconstraints_11
intc_1 // 1
return
main_l21:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
txna ApplicationArgs 1
store 0
txna ApplicationArgs 2
btoi
store 1
txna ApplicationArgs 3
btoi
store 2
txna ApplicationArgs 4
btoi
store 3
load 0
load 1
load 2
load 3
callsub create_10
intc_1 // 1
return
main_l22:
txn OnCompletion
intc_1 // OptIn
==
bnz main_l28
txn OnCompletion
intc_3 // UpdateApplication
==
bnz main_l27
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz main_l26
err
main_l26:
txn ApplicationID
intc_0 // 0
!=
assert
callsub delete_2
intc_1 // 1
return
main_l27:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_1
intc_1 // 1
return
main_l28:
txn ApplicationID
intc_0 // 0
!=
assert
callsub optin_0
intc_1 // 1
return

// opt_in
optin_0:
proto 0 0
intc_0 // 0
return

// update
update_1:
proto 0 0
intc_0 // 0
return

// delete
delete_2:
proto 0 0
intc_0 // 0
return

// auth_only
authonly_3:
proto 1 1
frame_dig -1
bytec_1 // "ma"
app_global_get
==
retsub

// auth_only
authonly_4:
proto 1 1
frame_dig -1
bytec_1 // "ma"
app_global_get
==
retsub

// auth_only
authonly_5:
proto 1 1
frame_dig -1
bytec_1 // "ma"
app_global_get
==
retsub

// auth_only
authonly_6:
proto 1 1
frame_dig -1
bytec_1 // "ma"
app_global_get
==
retsub

// auth_only
authonly_7:
proto 1 1
frame_dig -1
bytec_1 // "ma"
app_global_get
==
retsub

// send_asset
sendasset_8:
proto 4 0
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig -4
itxn_field XferAsset
frame_dig -3
itxn_field AssetReceiver
frame_dig -2
itxn_field AssetAmount
frame_dig -1
itxn_field Fee
itxn_submit
retsub

// send_algo
sendalgo_9:
proto 3 0
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig -3
itxn_field Receiver
frame_dig -2
itxn_field Amount
frame_dig -1
itxn_field Fee
itxn_submit
retsub

// create
create_10:
proto 4 0
bytec_3 // "mxs"
intc_0 // 0
app_global_put
bytec 4 // "mntf"
intc_0 // 0
app_global_put
bytec 5 // "mxtf"
intc_0 // 0
app_global_put
bytec_1 // "ma"
global CreatorAddress
app_global_put
frame_dig -4
global ZeroAddress
!=
assert
frame_dig -4
len
intc_2 // 32
==
assert
frame_dig -2
frame_dig -1
<=
assert
bytec_1 // "ma"
frame_dig -4
app_global_put
bytec_3 // "mxs"
frame_dig -3
app_global_put
bytec 4 // "mntf"
frame_dig -2
app_global_put
bytec 5 // "mxtf"
frame_dig -1
app_global_put
retsub

// update_time_constraints
updatetimeconstraints_11:
proto 3 0
txn Sender
callsub authonly_3
// unauthorized
assert
bytec_3 // "mxs"
frame_dig -3
app_global_put
bytec 4 // "mntf"
frame_dig -2
app_global_put
bytec 5 // "mxtf"
frame_dig -1
app_global_put
retsub

// update_manager_address
updatemanageraddress_12:
proto 1 0
txn Sender
callsub authonly_4
// unauthorized
assert
frame_dig -1
global ZeroAddress
!=
assert
frame_dig -1
len
intc_2 // 32
==
assert
bytec_1 // "ma"
frame_dig -1
app_global_put
retsub

// optin_asset
optinasset_13:
proto 4 0
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
frame_dig -1
bytec 7 // 0xb3b80c39a0d48da5ca41c6fdc0ecc6706b28c22c45d6ad8f6351c990ac353785
==
assert
bytec 7 // 0xb3b80c39a0d48da5ca41c6fdc0ecc6706b28c22c45d6ad8f6351c990ac353785
frame_dig -3
txnas Assets
asset_holding_get AssetBalance
store 31
store 30
load 31
intc_1 // 1
==
assert
frame_dig -3
txnas Assets
frame_bury 0
global CurrentApplicationAddress
frame_bury 1
frame_dig 1
len
intc_2 // 32
==
assert
frame_dig 1
min_balance
frame_bury 2
frame_dig 0
frame_dig 1
intc_0 // 0
intc_0 // 0
callsub sendasset_8
frame_dig 1
min_balance
frame_dig 2
-
frame_bury 3
frame_dig -4
gtxns Amount
frame_dig 3
==
assert
frame_dig -4
gtxns Receiver
global CurrentApplicationAddress
==
assert
retsub

// vest_tokens
vesttokens_14:
proto 5 0
intc_0 // 0
dupn 2
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
intc_0 // 0
dup
txn Sender
callsub authonly_5
// unauthorized
assert
frame_dig -4
gtxns XferAsset
frame_bury 0
frame_dig -4
gtxns AssetAmount
frame_bury 1
frame_dig -2
global LatestTimestamp
>=
assert
frame_dig -2
global LatestTimestamp
bytec_3 // "mxs"
app_global_get
+
<=
assert
frame_dig -1
bytec 4 // "mntf"
app_global_get
>=
assert
frame_dig -1
bytec 5 // "mxtf"
app_global_get
<=
assert
frame_dig -2
frame_dig -1
+
frame_bury -1
intc_0 // 0
frame_bury 2
frame_dig -3
global ZeroAddress
!=
assert
frame_dig -3
len
intc_2 // 32
==
assert
bytec_1 // "ma"
app_global_get
frame_bury 3
frame_dig 3
len
intc_2 // 32
==
assert
intc_0 // 0
frame_bury 4
frame_dig -2
itob
frame_dig -1
itob
concat
frame_dig 0
itob
concat
frame_dig 1
itob
concat
frame_dig 2
itob
concat
frame_dig 3
concat
bytec_2 // 0x00
intc_0 // 0
frame_dig 4
setbit
concat
frame_bury 5
global CurrentApplicationAddress
min_balance
frame_bury 10
frame_dig -3
box_get
store 33
store 32
load 33
!
assert
frame_dig -3
box_del
pop
frame_dig -3
frame_dig 5
box_put
global CurrentApplicationAddress
min_balance
frame_dig 10
-
frame_bury 11
frame_dig -5
gtxns Amount
frame_dig 11
==
assert
frame_dig -5
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig -5
gtxns Receiver
global CurrentApplicationAddress
==
assert
frame_dig -5
gtxns CloseRemainderTo
global ZeroAddress
==
assert
frame_dig -5
gtxns RekeyTo
global ZeroAddress
==
assert
frame_dig -5
gtxns Lease
global ZeroAddress
==
assert
frame_dig -4
gtxns TypeEnum
intc_3 // axfer
==
assert
frame_dig -4
gtxns AssetReceiver
global CurrentApplicationAddress
==
assert
frame_dig -4
gtxns AssetSender
global ZeroAddress
==
assert
frame_dig -4
gtxns CloseRemainderTo
global ZeroAddress
==
assert
frame_dig -4
gtxns RekeyTo
global ZeroAddress
==
assert
frame_dig -4
gtxns Lease
global ZeroAddress
==
assert
frame_dig -4
gtxns AssetCloseTo
global ZeroAddress
==
assert
retsub

// claim_vesting
claimvesting_15:
proto 2 0
bytec_0 // ""
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
dupn 5
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -2
txnas Accounts
global ZeroAddress
!=
assert
frame_dig -2
txnas Accounts
len
intc_2 // 32
==
assert
frame_dig -2
txnas Accounts
box_get
store 35
store 34
load 35
assert
frame_dig -2
txnas Accounts
box_get
store 37
store 36
load 37
assert
load 36
frame_bury 0
frame_dig 0
intc_0 // 0
extract_uint64
frame_bury 1
frame_dig 0
pushint 8 // 8
extract_uint64
frame_bury 2
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 3
frame_dig 0
pushint 16 // 16
extract_uint64
frame_bury 4
frame_dig 0
pushint 24 // 24
extract_uint64
frame_bury 5
frame_dig 0
extract 40 32
frame_bury 6
frame_dig 0
intc 4 // 576
getbit
frame_bury 7
global LatestTimestamp
frame_dig 1
>=
assert
frame_dig 6
global ZeroAddress
!=
assert
frame_dig 6
bytec_1 // "ma"
app_global_get
==
assert
frame_dig 7
intc_0 // 0
==
assert
intc_0 // 0
frame_bury 8
frame_dig 2
global LatestTimestamp
>
bnz claimvesting_15_l5
frame_dig 5
frame_dig 3
-
frame_bury 8
claimvesting_15_l2:
frame_dig 8
intc_0 // 0
>
assert
frame_dig 4
frame_dig -2
txnas Accounts
frame_dig 8
intc_0 // 0
callsub sendasset_8
frame_dig 3
frame_dig 8
+
frame_dig 5
==
bnz claimvesting_15_l4
frame_dig 3
frame_dig 8
+
frame_bury 3
frame_dig 1
itob
frame_dig 2
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 3
itob
concat
frame_dig 6
concat
bytec_2 // 0x00
intc_0 // 0
frame_dig 7
setbit
concat
frame_bury 13
frame_dig -2
txnas Accounts
box_del
pop
frame_dig -2
txnas Accounts
frame_dig 13
box_put
b claimvesting_15_l6
claimvesting_15_l4:
global CurrentApplicationAddress
min_balance
frame_bury 11
frame_dig -2
txnas Accounts
box_del
pop
frame_dig 11
global CurrentApplicationAddress
min_balance
-
frame_bury 12
frame_dig 6
frame_dig 12
global MinTxnFee
-
intc_0 // 0
callsub sendalgo_9
b claimvesting_15_l6
claimvesting_15_l5:
frame_dig 2
frame_dig 1
-
frame_bury 9
global LatestTimestamp
frame_dig 1
-
frame_bury 10
frame_dig 5
frame_dig 10
mulw
intc_0 // 0
frame_dig 9
divmodw
pop
pop
swap
!
assert
frame_dig 3
-
frame_bury 8
b claimvesting_15_l2
claimvesting_15_l6:
retsub

// stake_to_delegator
staketodelegator_16:
proto 5 0
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -4
txn Sender
==
assert
frame_dig -5
txnas Applications
app_params_get AppAddress
store 39
store 38
load 39
assert
frame_dig -5
txnas Applications
frame_bury 0
frame_dig 0
itob
box_get
store 41
store 40
load 41
assert
frame_dig -4
box_get
store 43
store 42
load 43
assert
load 42
frame_bury 1
frame_dig 1
intc_0 // 0
extract_uint64
frame_bury 2
frame_dig 1
pushint 8 // 8
extract_uint64
frame_bury 3
frame_dig 1
pushint 16 // 16
extract_uint64
frame_bury 4
frame_dig 1
pushint 24 // 24
extract_uint64
frame_bury 5
frame_dig 1
intc_2 // 32
extract_uint64
frame_bury 6
frame_dig 1
extract 40 32
frame_bury 7
frame_dig 1
intc 4 // 576
getbit
frame_bury 8
frame_dig 7
global ZeroAddress
!=
assert
frame_dig 8
intc_0 // 0
==
assert
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig 5
frame_dig 6
-
itxn_field AssetAmount
frame_dig 4
itxn_field XferAsset
load 38
itxn_field AssetReceiver
itxn_next
pushint 6 // appl
itxn_field TypeEnum
frame_dig -5
txnas Applications
itxn_field ApplicationID
txn Sender
itxn_field Accounts
frame_dig -1
txnas Accounts
itxn_field Accounts
frame_dig -3
txnas Applications
itxn_field Applications
frame_dig -2
txnas Assets
itxn_field Assets
pushbytes 0x230b8ca4 // "stake(axfer,account,application,asset,account)void"
itxn_field ApplicationArgs
bytec 6 // 0x01
itxn_field ApplicationArgs
bytec 6 // 0x01
itxn_field ApplicationArgs
bytec_2 // 0x00
itxn_field ApplicationArgs
bytec 8 // 0x02
itxn_field ApplicationArgs
intc_0 // 0
itxn_field Fee
itxn_submit
intc_1 // 1
frame_bury 8
frame_dig 2
itob
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 7
concat
bytec_2 // 0x00
intc_0 // 0
frame_dig 8
setbit
concat
frame_bury 9
frame_dig -4
box_del
pop
frame_dig -4
frame_dig 9
box_put
retsub

// withdraw_from_delegator
withdrawfromdelegator_17:
proto 5 0
bytec_0 // ""
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -4
txn Sender
==
assert
frame_dig -4
box_get
store 45
store 44
load 45
assert
load 44
frame_bury 0
frame_dig 0
intc_0 // 0
extract_uint64
frame_bury 1
frame_dig 0
pushint 8 // 8
extract_uint64
frame_bury 2
frame_dig 0
pushint 16 // 16
extract_uint64
frame_bury 3
frame_dig 0
pushint 24 // 24
extract_uint64
frame_bury 4
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 5
frame_dig 0
extract 40 32
frame_bury 6
frame_dig 0
intc 4 // 576
getbit
frame_bury 7
frame_dig 6
global ZeroAddress
!=
assert
frame_dig 7
intc_1 // 1
==
assert
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
frame_dig -5
txnas Applications
itxn_field ApplicationID
txn Sender
itxn_field Accounts
frame_dig -1
txnas Accounts
itxn_field Accounts
frame_dig -3
txnas Applications
itxn_field Applications
frame_dig -2
txnas Assets
itxn_field Assets
pushbytes 0xd0c26eac // "withdraw_non_stake(account,asset,application,account)void"
itxn_field ApplicationArgs
bytec 6 // 0x01
itxn_field ApplicationArgs
bytec_2 // 0x00
itxn_field ApplicationArgs
bytec 6 // 0x01
itxn_field ApplicationArgs
bytec 8 // 0x02
itxn_field ApplicationArgs
intc_0 // 0
itxn_field Fee
itxn_submit
intc_0 // 0
frame_bury 7
frame_dig 1
itob
frame_dig 2
itob
concat
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
concat
bytec_2 // 0x00
intc_0 // 0
frame_dig 7
setbit
concat
frame_bury 8
frame_dig -4
box_del
pop
frame_dig -4
frame_dig 8
box_put
retsub

// add_whitelisted_app
addwhitelistedapp_18:
proto 2 0
intc_0 // 0
dupn 2
txn Sender
callsub authonly_6
// unauthorized
assert
global CurrentApplicationAddress
min_balance
frame_bury 0
frame_dig -1
txnas Applications
frame_bury 1
frame_dig 1
itob
bytec_0 // ""
box_put
global CurrentApplicationAddress
min_balance
frame_dig 0
-
frame_bury 2
frame_dig -2
gtxns Receiver
global CurrentApplicationAddress
==
assert
frame_dig -2
gtxns Amount
frame_dig 2
==
assert
retsub

// remove_whitelisted_app
removewhitelistedapp_19:
proto 1 0
intc_0 // 0
dupn 2
txn Sender
callsub authonly_7
// unauthorized
assert
global CurrentApplicationAddress
min_balance
frame_bury 0
frame_dig -1
txnas Applications
frame_bury 1
frame_dig 1
itob
box_get
store 47
store 46
load 47
assert
frame_dig 1
itob
box_del
assert
frame_dig 0
global CurrentApplicationAddress
min_balance
-
frame_bury 2
bytec_1 // "ma"
app_global_get
frame_dig 2
intc_0 // 0
callsub sendalgo_9
retsub