// Gora DAO proposal Smart Contract
// Version 1
// Website: https://www.gora.io/
// Creators: @emg110.algo
// Github: https://github.com/GoraNetwork/gora-dao-smartcontracts
/////////////////////////////////////////////////////////////////

#pragma version 8

//Check TXN first
callsub sub_check_txn

// Check creation TXN
// txn ApplicationID
// bz branch_create

// Checking onCompletion type for update application call
//txn OnCompletion
//int UpdateApplication
//==
//txn ApplicationID
//int 0
//!=
//&&
//bnz branch_update

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
txn ApplicationID
int 0
!=
&&
bnz branch_delete

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
txn ApplicationID
int 0
!=
&&
bnz branch_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz branch_error

// Checks the number of application args , if 0 then no method it is
txn NumAppArgs
int 0
==
bz branch_method_router
b branch_error

///////////////////////////////////////////


branch_delete:

	callsub sub_check_owner_auth

	int 1
	return




branch_closeout:

	callsub sub_check_owner_auth

	int 1
	return

///////////////////////////////////////////
branch_method_router:

	method "create_proposal(application,uint64,uint64,address,address,string,string)address"
	txn ApplicationArgs 0
	==
	txn ApplicationID
	int 0
	==
	&&
	bnz method_create_proposal

	method "update_proposal(application,uint64,uint64,address,address,string,string)address"
	txn ApplicationArgs 0
	==
	bnz method_update_proposal

	method "config_proposal(pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64),(uint64,uint64,uint64),(uint64,uint64,uint64),uint64)uint64"
	txn ApplicationArgs 0
	==
	bnz method_config_proposal

	method "update_manager_address(pay,byte[],byte[])string"
	txn ApplicationArgs 0
	==
	bnz method_update_manager_address

	method "activate_proposal(application,byte[],byte[])string"
	txn ApplicationArgs 0
	==
	bnz method_activate_proposal

	method "proposal_participate(pay,axfer,pay,axfer)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_participate

    method "proposal_withdraw_participate()uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_withdraw_participate

	method "proposal_vote(uint64)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_vote


	b branch_error

sub_check_txn:

	// Checks RekeyTo address transaction field to be empty (ZeroAddress)
	txn RekeyTo
	global ZeroAddress
	==
	assert

	// Checks CloseRemainderTo address transaction field to be empty (ZeroAddress)
	txn CloseRemainderTo
	global ZeroAddress
	==
	assert

	// Checks AssetCloseTo address transaction field to be empty (ZeroAddress)
	txn AssetCloseTo
	global ZeroAddress
	==
	assert

	// Check transaction type to be application call
	txn TypeEnum
	int appl
	==
	bz branch_error

	// Checking transaction fee
	txn Fee
	global MinTxnFee
	>=
	assert
	retsub

// Checks owner address authentication
sub_check_owner_auth:

	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// Checks manager address authentication
sub_check_manager_auth:
	txn Sender
	byte "manager_address"
	app_global_get
	==
	assert
	retsub


method_create_proposal:

	global CurrentApplicationID
	store 0

	txn ApplicationArgs 1
	btoi
	store 1
	byte "dao_app_id"
	load 1
	app_global_put


	txn ApplicationArgs 2
	btoi
	store 2
	byte "dao_asset_id"
	load 2
	app_global_put

	txn ApplicationArgs 3
	btoi
	store 3
	byte "proposal_asset_id"
	load 3
	app_global_put

	txn ApplicationArgs 4
	store 4
	byte "proposal_creator_address"
	load 4
	app_global_put

	txn ApplicationArgs 5
	store 5
	byte "manager_address"
	load 5
	app_global_put

	txn ApplicationArgs 6
	store 6
	byte "proposal_title"
	load 6
	app_global_put

	txn ApplicationArgs 7
	store 7
	byte "proposal_description"
	load 7
	app_global_put


	byte "participation_count"
	int 0
	app_global_put

	byte "vote_count"
	int 0
	app_global_put

	byte "proposal_is_activated"
	int 0
	app_global_put

	byte "proposal_yays"
	int 0
	app_global_put

	byte "proposal_nays"
	int 0
	app_global_put

	byte "proposal_abs"
	int 0
	app_global_put


	byte 0x151f7c75
	global CurrentApplicationAddress
	concat
	b branch_log_return

method_update_proposal:
	//byte "proposal_is_activated"
	//app_global_get
	//int 1
	//!=
	//assert

	global CurrentApplicationID
	store 0

	txn ApplicationArgs 1
	btoi
	store 1
	byte "dao_app_id"
	load 1
	app_global_put

	txn ApplicationArgs 2
	btoi
	store 2
	byte "dao_asset_id"
	load 2
	app_global_put

	txn ApplicationArgs 3
	btoi
	store 3
	byte "proposal_asset_id"
	load 3
	app_global_put

	txn ApplicationArgs 4
	store 4
	byte "proposal_creator_address"
	load 4
	app_global_put

	txn ApplicationArgs 5
	store 5
	byte "manager_address"
	load 5
	app_global_put

	txn ApplicationArgs 6
	store 6
	byte "proposal_title"
	load 6
	app_global_put

	txn ApplicationArgs 7
	store 7
	byte "proposal_description"
	load 7
	app_global_put

	byte "participation_count"
	int 0
	app_global_put

	byte "vote_count"
	int 0
	app_global_put

	byte "proposal_yays"
	int 0
	app_global_put

	byte "proposal_nays"
	int 0
	app_global_put

	byte "proposal_abs"
	int 0
	app_global_put

	

	byte 0x151f7c75
	global CurrentApplicationAddress
	concat
	b branch_log_return

method_update_manager_address:
	callsub sub_check_manager_auth

	txn ApplicationArgs 1
	byte "manager_address"
	app_global_put

	byte 0x151f7c75
	byte "Proposal manager address is now updated!"
	concat
	b branch_log_return

method_activate_proposal:
	callsub sub_check_manager_auth
	
	byte "proposal_activation_allowed"
	app_global_get
	bz branch_error_activation

	byte 0x151f7c75
	byte "Proposal is activated!"
	concat
	b branch_log_return

// Handles configuration of Proposal
method_config_proposal:

	gtxn 0 TypeEnum
	int pay
	==
	bz branch_error

	gtxn 0 Amount
	int 3000
	>=
	assert

	gtxn 0 Receiver
	global CurrentApplicationAddress
	==
	assert

	txn ApplicationArgs 1 //proposal_min_participation_algo
	store 1
	byte "proposal_min_participation_algo"
	load 1
	btoi
	app_global_put
	//log

	txn ApplicationArgs 2 //proposal_min_participation_stake
	store 2
	byte "proposal_min_participation_stake"
	load 2
	btoi
	app_global_put
	//log

	txn ApplicationArgs 3 //proposal_duration
	store 3
	byte "proposal_duration"
	load 3
	btoi
	app_global_put
	//log

	txn ApplicationArgs 4 //proposal_amount
	store 4
	byte "proposal_amount"
	load 4
	btoi
	app_global_put
	//log

	txn ApplicationArgs 5 //proposal_voting_duration
	store 5
	byte "proposal_voting_duration"
	load 5
	btoi
	app_global_put
	//log

	txn ApplicationArgs 6 //proposal_voting_start
	store 6
	byte "proposal_voting_start"
	load 6
	btoi
	app_global_put
	//log

	txn ApplicationArgs 7 //proposal_participation_fee
	store 7
	byte "proposal_participation_fee"
	load 7
	btoi
	app_global_put
	//log

	txn ApplicationArgs 8 //proposal_participation_fee_algo
	store 8
	byte "proposal_participation_fee_algo"
	load 8
	btoi
	app_global_put
	//log

	txn ApplicationArgs 9 //proposal_vote_fee
	btoi
	store 9
	byte "proposal_vote_fee"
	load 9
	app_global_put
	//log

	txn ApplicationArgs 10 //proposal_vote_fee_algo
	store 10
	byte "proposal_vote_fee_algo"
	load 10
	btoi
	app_global_put
	//log

	txn ApplicationArgs 11 // proposal_participation
	store 11

	txn ApplicationArgs 12 // proposal_threshold
	store 12

	txn ApplicationArgs 13 // proposal_allocations
	store 13

	txn ApplicationArgs 14 // proposal_vote_values
	store 14

	byte "participation_threshold"
	load 11
	box_put

	byte "vote_threshold"
	load 12
	box_put

	byte "proposal_allocation"
	load 13
	box_put

	byte "proposal_vote_values"
	load 14
	btoi
	app_global_put


	itxn_begin
	global CurrentApplicationAddress
	itxn_field Sender
	int axfer
	itxn_field TypeEnum
	global CurrentApplicationAddress
	itxn_field AssetReceiver
	int 0
	itxn_field AssetAmount
	txna Assets 1
	itxn_field XferAsset
	itxn_submit
	itxn TxID
    log

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return


method_proposal_participate:
	txna Accounts 1 // GoraDAO Admin account
	store 0

	txn Sender // User
	store 1

	// Participation are closed after proposal is activated for voting
	byte "proposal_is_activated"
	app_global_get
	bnz branch_error

	byte "participation_count"
	app_global_get
	int 1
	+
	store 20
	byte "participation_count"
	load 20
	app_global_put

    // Checking Transaction group
    global GroupSize
    int 6
    ==
    assert
    
	// Checking the pay and axfer txns
	gtxn 1 RekeyTo
    global ZeroAddress
    ==
    gtxn 2 RekeyTo
    global ZeroAddress
    ==
	gtxn 3 RekeyTo
    global ZeroAddress
    ==
	gtxn 4 RekeyTo
    global ZeroAddress
    ==
	&&
	&&
    assert

    gtxn 1 CloseRemainderTo
    global ZeroAddress
    ==
	gtxn 3 CloseRemainderTo
    global ZeroAddress
    ==
	&&
    assert

    gtxn 2 AssetCloseTo
    global ZeroAddress
    ==
	gtxn 4 AssetCloseTo
    global ZeroAddress
    ==
	&&
    assert


    gtxn 1 Fee
    global MinTxnFee
    >=
    gtxn 2 Fee
    global MinTxnFee
    >=
	gtxn 3 Fee
    global MinTxnFee
    >=
    gtxn 4 Fee
    global MinTxnFee
    >=
	&&
	&&
    assert

    byte "proposal_asset_id"
    app_global_get
    gtxn 2 XferAsset
    ==
    assert

	byte "proposal_asset_id"
    app_global_get
    gtxn 4 XferAsset
    ==
    assert

    gtxn 1 Amount
    byte "proposal_participation_fee_algo"
	app_global_get
    >=
    assert

    gtxn 2 AssetAmount
    byte "proposal_participation_fee"
	app_global_get
    ==
    assert

	gtxn 3 Amount
    byte "proposal_min_participation_algo"
	app_global_get
    >=
    assert

    gtxn 4 AssetAmount
    byte "proposal_min_participation_stake"
	app_global_get
    ==
    assert


    byte "proposal_asset_id"
    app_global_get
    txna Assets 1
    ==
    assert

	byte "dao_asset_id"
    app_global_get
    txna Assets 0
    ==
    assert

	load 1
	box_get
	//bnz branch_delete_participate_box
	bnz branch_error
	load 1
    byte ""
    box_put

	byte "participation_threshold"
	box_get
	assert
	int 0
	extract_uint64
	load 20
	swap
	>=
	bnz branch_activate_and_participate
	
    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

branch_activate_and_participate:
	byte "proposal_is_activated"
	int 1
	app_global_put
	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

branch_delete_participate_box:
	load 0
	box_del
	load 0
    byte "VOTE_PLACE_HOLDER"
    box_put

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return


method_proposal_withdraw_participate:
 	txna Accounts 0
    store 0

	// Participation Withdrawals are closed after proposal is activated for voting
	byte "proposal_is_activated"
	app_global_get
	bnz branch_error

	byte "participation_count"
	app_global_get
	int 1
	-
	store 20
	byte "participation_count"
	load 20
	app_global_put

	load 0
	box_get
	assert
	pop
	load 0
    box_del
    pop

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

method_proposal_vote:
	txna Accounts 0
	store 0
	txn Sender
	store 2

	byte "proposal_is_activated"
	app_global_get
	bz branch_error_activation

	// The vote value
	txn ApplicationArgs 1
	btoi
	store 1


    // Checking Transaction group
    global GroupSize
    int 4
    ==
    assert

    // Checking the asset ref to be DAO asset
    byte "dao_asset_id"
    app_global_get
    txna Assets 0
    ==
    assert

	// Check DAO asset holding
    //load 0
    //txna Assets 0
    //asset_holding_get AssetBalance
    //assert
	//pop

	// Check participation
	load 2
	box_get
	assert
	byte ""
	==
	assert
	load 2
	box_del
	pop

	

	// Casting vote to proposal
	load 2
	load 1
	itob
	box_put
	
	load 1
	switch branch_vote_nay branch_vote_yay branch_vote_abs

branch_vote_nay:
	byte "proposal_nays"
	dup
	app_global_get
	int 1
	+
	app_global_put

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return
branch_vote_yay:
	byte "proposal_yays"
	dup
	app_global_get
	int 1
	+
	app_global_put
	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

branch_vote_abs:
	byte "proposal_abs"
	dup
	app_global_get
	int 1
	+
	app_global_put

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return



// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
branch_log_return:
	log
	int 1
	return

branch_error:
	err
branch_error_activation:
	err

