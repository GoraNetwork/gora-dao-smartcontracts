// Gora DAO proposal Smart Contract
// Version 1
// Website: https://www.gora.io/
// Creators: @emg110.algo
// Github: https://github.com/GoraNetwork/gora-dao-smartcontracts
/////////////////////////////////////////////////////////////////

#pragma version 8

//Check TXN first
callsub sub_check_txn

// Check creation TXN
// txn ApplicationID
// bz branch_create

// Checking onCompletion type for update application call
//txn OnCompletion
//int UpdateApplication
//==
//txn ApplicationID
//int 0
//!=
//&&
//bnz branch_update

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
txn ApplicationID
int 0
!=
&&
bnz branch_delete

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
txn ApplicationID
int 0
!=
&&
bnz branch_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz branch_error

// Checks the number of application args , if 0 then no method it is
// txn NumAppArgs
// int 0
// ==
// bz branch_method_router
// b branch_error

b branch_method_router

///////////////////////////////////////////


branch_delete:

	callsub sub_check_owner_auth

	int 1
	return




branch_closeout:

	callsub sub_check_owner_auth

	int 1
	return

///////////////////////////////////////////
branch_method_router:

	method "create_proposal(uint64,address,address,string,string)address"
	txn ApplicationArgs 0
	==
	txn ApplicationID
	int 0
	==
	&&
	bnz method_create_proposal

	method "update_proposal(uint64,address,uint64,string,string)address"
	txn ApplicationArgs 0
	==
	bnz method_update_proposal

	// method "config_proposal(pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64),(uint64,uint64,uint64),(uint64,uint64,uint64),uint64)uint64"
	method "config_proposal(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,string,string)uint64"
	txn ApplicationArgs 0
	==
	bnz method_config_proposal

	method "update_manager_address(pay,byte[],byte[])string"
	txn ApplicationArgs 0
	==
	bnz method_update_manager_address

	method "activate_proposal(pay,pay,axfer)string"
	txn ApplicationArgs 0
	==
	bnz method_activate_proposal

	method "proposal_participate(pay,axfer,pay,axfer)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_participate

    method "proposal_withdraw_participate()uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_withdraw_participate

	method "proposal_vote(uint64)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_vote


	b branch_error

sub_check_txn:

	// Checks RekeyTo address transaction field to be empty (ZeroAddress)
	txn RekeyTo
	global ZeroAddress
	==
	assert

	// Checks CloseRemainderTo address transaction field to be empty (ZeroAddress)
	txn CloseRemainderTo
	global ZeroAddress
	==
	assert

	// Checks AssetCloseTo address transaction field to be empty (ZeroAddress)
	txn AssetCloseTo
	global ZeroAddress
	==
	assert

	// Check transaction type to be application call
	txn TypeEnum
	int appl
	==
	bz branch_txn_error

	// Checking transaction fee
	txn Fee
	global MinTxnFee
	>=
	assert
	retsub

// Checks owner address authentication
sub_check_owner_auth:
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// Checks manager address authentication
sub_check_manager_auth:
	txn Sender
	byte "manager_address"
	app_global_get
	==
	assert
	retsub


method_create_proposal:
	callsub sub_check_owner_auth

	global CurrentApplicationID
	store 0

	txna Applications 1
	// btoi
	store 1
	byte "dao_app_id"
	load 1
	app_global_put


	txn ApplicationArgs 1
	btoi
	store 2
	byte "dao_asset_id"
	load 2
	app_global_put

	// txn ApplicationArgs 2
	// btoi
	// store 3
	// byte "proposal_asset_id"
	// load 3
	// app_global_put

	txn ApplicationArgs 2
	store 4
	byte "proposal_creator_address"
	load 4
	app_global_put

	txn ApplicationArgs 2
	store 5
	byte "manager_address"
	load 5
	app_global_put

	byte "dao_manager_address"
	txn ApplicationArgs 3
	app_global_put

	txn ApplicationArgs 4
	extract 2 0
	store 6
	byte "proposal_title"
	load 6
	app_global_put

	txn ApplicationArgs 5
	extract 2 0
	store 7
	byte "proposal_description"
	load 7
	app_global_put


	byte "participation_count"
	int 0
	app_global_put

	byte "vote_count"
	int 0
	app_global_put

	byte "proposal_is_activated"
	int 0
	app_global_put

	byte "proposal_yays"
	int 0
	app_global_put

	byte "proposal_nays"
	int 0
	app_global_put

	byte "proposal_abs"
	int 0
	app_global_put


	byte 0x151f7c75
	global CurrentApplicationAddress
	concat
	b branch_log_return

method_update_proposal:
	callsub sub_check_owner_auth
	byte "proposal_is_activated"
	app_global_get
	int 1
	!=
	assert
	// byte "voting_is_activated"
	// app_global_get
	// int 1
	// !=
	// assert

	// global CurrentApplicationID
	// store 0

	// txn ApplicationArgs 1
	// btoi
	// store 1
	// byte "dao_app_id"
	// load 1
	// app_global_put

	// txn ApplicationArgs 3
	// btoi
	// store 3
	// byte "proposal_asset_id"
	// load 3
	// app_global_put
	// byte "dao_asset_id"
	// load 3
	// app_global_put

	// txn ApplicationArgs 2
	// store 4
	// byte "proposal_creator_address"
	// load 4
	// app_global_put

	// txn ApplicationArgs 2
	// store 5
	// byte "manager_address"
	// load 5
	// app_global_put

	// txn ApplicationArgs 4
	// extract 2 0
	// store 6
	// byte "proposal_title"
	// load 6
	// app_global_put

	// txn ApplicationArgs 5
	// extract 2 0
	// store 7
	// byte "proposal_description"
	// load 7
	// app_global_put

	// byte "participation_count"
	// int 0
	// app_global_put

	// byte "vote_count"
	// int 0
	// app_global_put

	// byte "proposal_yays"
	// int 0
	// app_global_put

	// byte "proposal_nays"
	// int 0
	// app_global_put

	// byte "proposal_abs"
	// int 0
	// app_global_put

	

	byte 0x151f7c75
	global CurrentApplicationAddress
	concat
	b branch_log_return

method_update_manager_address:
	callsub sub_check_manager_auth

	byte "manager_address"
	txn ApplicationArgs 1
	
	app_global_put

	byte 0x151f7c75
	byte "Proposal manager address is now updated!"
	concat
	b branch_log_return

method_activate_proposal:
	byte "proposal_is_activated"
	app_global_get
	bnz branch_error_active

	callsub sub_check_manager_auth

	txn Sender
	store 0

	byte "dao_app_id"
	app_global_get
	store 1

	
	
	
    gtxn 0 RekeyTo
    global ZeroAddress
    ==
    gtxn 1 RekeyTo
    global ZeroAddress
    ==
    &&
	gtxn 2 RekeyTo
    global ZeroAddress
    ==
	&&
    bz branch_txn_error

    gtxn 0 CloseRemainderTo
    global ZeroAddress
    ==
    gtxn 1 CloseRemainderTo
    global ZeroAddress
    ==
	&&
	gtxn 2 AssetCloseTo
    global ZeroAddress
    ==
	&&
    bz branch_txn_error

    gtxn 0 TypeEnum
    int pay
    ==
    gtxn 1 TypeEnum
    int pay
    ==
    &&
	gtxn 2 TypeEnum
    int axfer
    ==
	&&
    bz branch_txn_error

	
    gtxn 0 Fee
    global MinTxnFee
    >=
    gtxn 1 Fee
    global MinTxnFee
    >=
    &&

	gtxn 2 Fee
    global MinTxnFee
    >=
	&&
    bz branch_txn_error

    
  	gtxn 0 Receiver
	global CurrentApplicationAddress
    ==
    gtxn 1 Receiver
	global CreatorAddress
    ==
	&&
	gtxn 2 AssetReceiver
	global CreatorAddress
    ==
	&&
    bz branch_error_receiver

	// Checking the amount for pay MBR (box MBR,...)
    gtxn 0 Amount
    int 3000
    >=
    assert

    gtxn 1 Amount
	load 1
    byte "proposal_fee_algo"
    app_global_get_ex
    >=
    assert
	
    gtxn 2 AssetAmount
	load 1
    byte "proposal_fee_token"
    app_global_get_ex
    >=
    assert

	byte "proposal_is_activated"
	int 1
	app_global_put

	byte 0x151f7c75
	byte "Proposal is activated!"
	concat
	b branch_log_return

// Handles configuration of Proposal
method_config_proposal:
	byte "proposal_is_activated"
	app_global_get
	bnz branch_error_active

	callsub sub_check_manager_auth
	// gtxn 0 TypeEnum
	// int pay
	// ==
	// bz branch_error

	// gtxn 0 Amount
	// int 3000
	// >=
	// assert

	// gtxn 0 Receiver
	// global CurrentApplicationAddress
	// ==
	// assert

	byte "voting_is_activated"
	int 0
	app_global_put

	txn ApplicationArgs 1 //proposal_min_participation_algo
	store 1
	byte "proposal_min_participation_algo"
	load 1
	btoi
	app_global_put
	//log

	txn ApplicationArgs 2 //proposal_min_participation_token
	store 2
	byte "proposal_min_participation_token"
	load 2
	btoi
	app_global_put
	//log

	txn ApplicationArgs 3 //proposal_duration
	store 3
	byte "proposal_duration"
	load 3
	btoi
	app_global_put
	//log

	txn ApplicationArgs 4 //proposal_amount
	store 4
	byte "proposal_amount"
	load 4
	btoi
	app_global_put
	//log

	txn ApplicationArgs 5 //proposal_voting_duration
	store 5
	byte "proposal_voting_duration"
	load 5
	btoi
	app_global_put
	//log

	txn ApplicationArgs 6 //proposal_is_governance
	store 6
	byte "proposal_is_governance"
	load 6
	btoi
	app_global_put
	//log

	txn ApplicationArgs 7 //proposal_participation_fee
	store 7
	byte "proposal_participation_fee"
	load 7
	btoi
	app_global_put
	//log

	txn ApplicationArgs 8 //proposal_participation_fee_algo
	store 8
	byte "proposal_participation_fee_algo"
	load 8
	btoi
	app_global_put
	//log

	txn ApplicationArgs 9 //proposal_vote_fee
	btoi
	store 9
	byte "proposal_vote_fee"
	load 9
	app_global_put
	//log

	txn ApplicationArgs 10 //proposal_vote_fee_algo
	store 10
	byte "proposal_vote_fee_algo"
	load 10
	btoi
	app_global_put
	//log

	txn ApplicationArgs 11 // proposal_participation_threshold
	store 11
	byte "participation_threshold"
	load 11
	btoi
	app_global_put

	txn ApplicationArgs 12 // proposal_vote_threshold
	store 12
	byte "vote_threshold"
	load 12
	btoi
	app_global_put

	// txn ApplicationArgs 13 // proposal_allocations
	// store 13

	txn ApplicationArgs 13 // voting_start_timestamp
	store 13
	byte "voting_start_timestamp"
	load 13
	btoi
	app_global_put

	txn ApplicationArgs 14 // proposal_title
	extract 2 0
	store 14

	txn ApplicationArgs 15 // proposal_description
	extract 2 0
	store 15

	byte "proposal_title"
	load 14
	app_global_put

	byte "proposal_description"
	load 15
	app_global_put


	itxn_begin
	global CurrentApplicationAddress
	itxn_field Sender
	int axfer
	itxn_field TypeEnum
	global CurrentApplicationAddress
	itxn_field AssetReceiver
	int 0
	itxn_field AssetAmount
	txna Assets 0
	itxn_field XferAsset
	itxn_submit
	itxn TxID
    log

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return


method_proposal_participate:
	txna Accounts 1 // GoraDAO Admin account
	store 0

	txn Sender // User
	store 1

	//Participation are closed after proposal is activated for voting
	// byte "voting_is_activated"
	// app_global_get
	// bnz branch_error_active

	byte "participation_count"
	app_global_get
	int 1
	+
	store 20
	byte "participation_count"
	load 20
	app_global_put

    // Checking Transaction group
    global GroupSize
    int 6
    ==
    assert
    
	// Checking the pay and axfer txns
	gtxn 1 RekeyTo
    global ZeroAddress
    ==
    gtxn 2 RekeyTo
    global ZeroAddress
    ==
	gtxn 3 RekeyTo
    global ZeroAddress
    ==
	gtxn 4 RekeyTo
    global ZeroAddress
    ==
	&&
	&&
    assert

    gtxn 1 CloseRemainderTo
    global ZeroAddress
    ==
	gtxn 3 CloseRemainderTo
    global ZeroAddress
    ==
	&&
    assert

    gtxn 2 AssetCloseTo
    global ZeroAddress
    ==
	gtxn 4 AssetCloseTo
    global ZeroAddress
    ==
	&&
    assert


    gtxn 1 Fee
    global MinTxnFee
    >=
    gtxn 2 Fee
    global MinTxnFee
    >=
	gtxn 3 Fee
    global MinTxnFee
    >=
    gtxn 4 Fee
    global MinTxnFee
    >=
	&&
	&&
    assert

    byte "proposal_asset_id"
    app_global_get
    gtxn 2 XferAsset
    ==
	byte "dao_asset_id"
    app_global_get
    gtxn 2 XferAsset
    ==
	||
    assert

	byte "proposal_asset_id"
    app_global_get
    gtxn 4 XferAsset
    ==
	byte "dao_asset_id"
    app_global_get
    gtxn 4 XferAsset
    ==
	||
    assert

    gtxn 1 Amount
    byte "proposal_participation_fee_algo"
	app_global_get
    >=
    assert

    gtxn 2 AssetAmount
    byte "proposal_participation_fee"
	app_global_get
    >=
    assert

	gtxn 3 Amount
    byte "proposal_min_participation_algo"
	app_global_get
    >=
    assert

    gtxn 4 AssetAmount
    byte "proposal_min_participation_token"
	app_global_get
    >=
    assert


    // byte "proposal_asset_id"
    // app_global_get
    // txna Assets 0
    // ==
    // assert

	// byte "dao_asset_id"
    // app_global_get
    // txna Assets 0
    // ==
    // assert

	load 1
	box_get
	bnz branch_error_participate

	load 1
    byte ""
    box_put

	load 20
	byte "participation_threshold"
	app_global_get
	>=
	bnz branch_activate_and_participate
	
    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

branch_activate_and_participate:
	byte "voting_is_activated"
	int 1
	app_global_put

	byte "voting_start_timestamp"
	global LatestTimestamp
	app_global_put
	
	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return



method_proposal_withdraw_participate:
 	txna Accounts 0
    store 0

	// Participation Withdrawals are closed after proposal is activated for voting
	// byte "voting_is_activated"
	// app_global_get
	// bnz branch_error_active

	byte "participation_count"
	app_global_get
	int 1
	-
	store 20
	byte "participation_count"
	load 20
	app_global_put

	load 0
	box_get
	assert
	pop
	load 0
    box_del
    pop

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

method_proposal_vote:
	txna Accounts 0
	store 0
	txn Sender
	store 2

	byte "voting_is_activated"
	app_global_get
	bz branch_error_vote_not_active

	// The vote value
	txn ApplicationArgs 1
	btoi
	store 1


    // Checking Transaction group
    global GroupSize
    int 4
    ==
    assert

    // Checking the asset ref to be DAO asset
    byte "dao_asset_id"
    app_global_get
    txna Assets 0
    ==
    assert

	// Check DAO asset holding
    //load 0
    //txna Assets 0
    //asset_holding_get AssetBalance
    //assert
	//pop

	// Check participation
	load 2
	box_get
	assert
	byte ""
	==
	assert
	load 2
	box_del
	pop

	

	
	
	load 1
	switch branch_vote_nay branch_vote_yay branch_vote_abs

branch_vote_nay:
	// Casting vote to proposal
	load 2
	byte "nay"
	box_put
	byte "proposal_nays"
	dup
	app_global_get
	int 1
	+
	app_global_put

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return
branch_vote_yay:
	load 2
	byte "yay"
	box_put
	byte "proposal_yays"
	dup
	app_global_get
	int 1
	+
	app_global_put
	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

branch_vote_abs:
	load 2
	byte "abs"
	box_put
	byte "proposal_abs"
	dup
	app_global_get
	int 1
	+
	app_global_put

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return



// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
branch_log_return:
	log
	int 1
	return

branch_error:
	byte "Error Method Routing"
	err
branch_error_active:
	byte "Error Already Activated"
	err
branch_error_participate:
	byte "Error Already Participated"
	err
branch_error_not_active:
	byte "Error Not Activated"
	err
branch_error_vote_not_active:
	byte "Error Vote Not Activated"
	err
branch_txn_error:
	byte "Error TXN Check"
	err
// branch_error_txnfee:
// 	byte "Error TXN Fee"
// 	err
// branch_error_rekeyto:
// 	byte "Error RekeyTo"
// 	err
// branch_error_closeto:
// 	byte "Error CloseRemainderTo"
// 	err
// branch_error_typeenum:
// 	byte "Error TypeEnum"
// 	err
branch_error_receiver:
	byte "Error Receiver"
	err

