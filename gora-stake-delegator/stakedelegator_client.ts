import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class StakeDelegator extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: { manager: { type: bkr.AVMType.bytes, key: "m", desc: "", static: false }, manager_algo_share: { type: bkr.AVMType.uint64, key: "mas", desc: "", static: false }, manager_gora_share: { type: bkr.AVMType.uint64, key: "mgs", desc: "", static: false }, global_aggregation_round: { type: bkr.AVMType.bytes, key: "ar", desc: "", static: false }, global_most_recent_aggregation: { type: bkr.AVMType.bytes, key: "gmra", desc: "", static: false }, global_stake_time: { type: bkr.AVMType.bytes, key: "gst", desc: "", static: false }, global_stake: { type: bkr.AVMType.bytes, key: "gs", desc: "", static: false }, global_last_update: { type: bkr.AVMType.uint64, key: "glut", desc: "", static: false }, pending_deposits: { type: bkr.AVMType.bytes, key: "pd", desc: "", static: false }, pending_withdrawals: { type: bkr.AVMType.bytes, key: "pw", desc: "", static: false } }, reserved: {} };
    override acctSchema: bkr.Schema = { declared: { last_update_time: { type: bkr.AVMType.uint64, key: "lut", desc: "", static: false }, local_stake: { type: bkr.AVMType.bytes, key: "ls", desc: "", static: false }, local_non_stake: { type: bkr.AVMType.bytes, key: "lns", desc: "", static: false }, aggregation_tracker: { type: bkr.AVMType.bytes, key: "lat", desc: "", static: false }, vesting_tracker: { type: bkr.AVMType.bytes, key: "vt", desc: "", static: false }, lifetime_rewards: { type: bkr.AVMType.uint64, key: "lt", desc: "", static: false } }, reserved: {} };
    override approvalProgram: string = "";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu";
    override methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "init_app", desc: "", args: [{ type: "asset", name: "asset", desc: "" }, { type: "uint64", name: "timelock", desc: "" }, { type: "application", name: "main_app_id", desc: "" }, { type: "address", name: "main_app_addr", desc: "" }, { type: "address", name: "manager_address", desc: "" }, { type: "uint64", name: "manager_algo_share", desc: "" }, { type: "uint64", name: "manager_gora_share", desc: "" }, { type: "pay", name: "algo_xfer", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "opt_in", desc: "", args: [{ type: "uint64", name: "vesting_app_id", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "stake", desc: "", args: [{ type: "axfer", name: "asset_pay", desc: "" }, { type: "account", name: "vesting_on_behalf_of", desc: "" }, { type: "application", name: "main_app_ref", desc: "" }, { type: "asset", name: "asset_reference", desc: "" }, { type: "account", name: "manager_reference", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "unstake", desc: "", args: [{ type: "uint64", name: "amount_to_withdraw", desc: "" }, { type: "application", name: "main_app_ref", desc: "" }, { type: "asset", name: "asset_reference", desc: "" }, { type: "account", name: "manager_reference", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "user_claim", desc: "", args: [{ type: "asset", name: "asset_reference", desc: "" }, { type: "application", name: "main_app_reference", desc: "" }, { type: "account", name: "manager_reference", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "manual_process_aggregation", desc: "", args: [{ type: "asset", name: "asset_reference", desc: "" }, { type: "application", name: "main_app_reference", desc: "" }, { type: "account", name: "manager_reference", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "register_participation_key", desc: "", args: [{ type: "address", name: "new_key", desc: "" }, { type: "application", name: "main_ref", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "configure_settings", desc: "", args: [{ type: "address", name: "manager_address", desc: "" }, { type: "uint64", name: "manager_algo_share", desc: "" }, { type: "uint64", name: "manager_gora_share", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "withdraw_non_stake", desc: "", args: [{ type: "account", name: "vesting_on_behalf_of", desc: "" }, { type: "asset", name: "goracle_token_reference", desc: "" }, { type: "application", name: "main_app_reference", desc: "" }, { type: "account", name: "manager_reference", desc: "" }], returns: { type: "void", desc: "" } })
    ];
    async init_app(args: {
        asset: bigint;
        timelock: bigint;
        main_app_id: bigint;
        main_app_addr: string;
        manager_address: string;
        manager_algo_share: bigint;
        manager_gora_share: bigint;
        algo_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.init_app({ asset: args.asset, timelock: args.timelock, main_app_id: args.main_app_id, main_app_addr: args.main_app_addr, manager_address: args.manager_address, manager_algo_share: args.manager_algo_share, manager_gora_share: args.manager_gora_share, algo_xfer: args.algo_xfer }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async opt_in(args: {
        vesting_app_id: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.opt_in({ vesting_app_id: args.vesting_app_id }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async stake(args: {
        asset_pay: algosdk.TransactionWithSigner | algosdk.Transaction;
        vesting_on_behalf_of: string;
        main_app_ref: bigint;
        asset_reference: bigint;
        manager_reference: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.stake({ asset_pay: args.asset_pay, vesting_on_behalf_of: args.vesting_on_behalf_of, main_app_ref: args.main_app_ref, asset_reference: args.asset_reference, manager_reference: args.manager_reference }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async unstake(args: {
        amount_to_withdraw: bigint;
        main_app_ref: bigint;
        asset_reference: bigint;
        manager_reference: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.unstake({ amount_to_withdraw: args.amount_to_withdraw, main_app_ref: args.main_app_ref, asset_reference: args.asset_reference, manager_reference: args.manager_reference }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async user_claim(args: {
        asset_reference: bigint;
        main_app_reference: bigint;
        manager_reference: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.user_claim({ asset_reference: args.asset_reference, main_app_reference: args.main_app_reference, manager_reference: args.manager_reference }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async manual_process_aggregation(args: {
        asset_reference: bigint;
        main_app_reference: bigint;
        manager_reference: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.manual_process_aggregation({ asset_reference: args.asset_reference, main_app_reference: args.main_app_reference, manager_reference: args.manager_reference }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async register_participation_key(args: {
        new_key: string;
        main_ref: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.register_participation_key({ new_key: args.new_key, main_ref: args.main_ref }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async configure_settings(args: {
        manager_address: string;
        manager_algo_share: bigint;
        manager_gora_share: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.configure_settings({ manager_address: args.manager_address, manager_algo_share: args.manager_algo_share, manager_gora_share: args.manager_gora_share }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async withdraw_non_stake(args: {
        vesting_on_behalf_of: string;
        goracle_token_reference: bigint;
        main_app_reference: bigint;
        manager_reference: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this._execute(await this.compose.withdraw_non_stake({ vesting_on_behalf_of: args.vesting_on_behalf_of, goracle_token_reference: args.goracle_token_reference, main_app_reference: args.main_app_reference, manager_reference: args.manager_reference }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    compose = {
        init_app: async (args: {
            asset: bigint;
            timelock: bigint;
            main_app_id: bigint;
            main_app_addr: string;
            manager_address: string;
            manager_algo_share: bigint;
            manager_gora_share: bigint;
            algo_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "init_app"), { asset: args.asset, timelock: args.timelock, main_app_id: args.main_app_id, main_app_addr: args.main_app_addr, manager_address: args.manager_address, manager_algo_share: args.manager_algo_share, manager_gora_share: args.manager_gora_share, algo_xfer: args.algo_xfer }, txnParams, atc);
        },
        opt_in: async (args: {
            vesting_app_id: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "opt_in"), { vesting_app_id: args.vesting_app_id }, txnParams, atc);
        },
        stake: async (args: {
            asset_pay: algosdk.TransactionWithSigner | algosdk.Transaction;
            vesting_on_behalf_of: string;
            main_app_ref: bigint;
            asset_reference: bigint;
            manager_reference: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "stake"), { asset_pay: args.asset_pay, vesting_on_behalf_of: args.vesting_on_behalf_of, main_app_ref: args.main_app_ref, asset_reference: args.asset_reference, manager_reference: args.manager_reference }, txnParams, atc);
        },
        unstake: async (args: {
            amount_to_withdraw: bigint;
            main_app_ref: bigint;
            asset_reference: bigint;
            manager_reference: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "unstake"), { amount_to_withdraw: args.amount_to_withdraw, main_app_ref: args.main_app_ref, asset_reference: args.asset_reference, manager_reference: args.manager_reference }, txnParams, atc);
        },
        user_claim: async (args: {
            asset_reference: bigint;
            main_app_reference: bigint;
            manager_reference: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "user_claim"), { asset_reference: args.asset_reference, main_app_reference: args.main_app_reference, manager_reference: args.manager_reference }, txnParams, atc);
        },
        manual_process_aggregation: async (args: {
            asset_reference: bigint;
            main_app_reference: bigint;
            manager_reference: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "manual_process_aggregation"), { asset_reference: args.asset_reference, main_app_reference: args.main_app_reference, manager_reference: args.manager_reference }, txnParams, atc);
        },
        register_participation_key: async (args: {
            new_key: string;
            main_ref: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "register_participation_key"), { new_key: args.new_key, main_ref: args.main_ref }, txnParams, atc);
        },
        configure_settings: async (args: {
            manager_address: string;
            manager_algo_share: bigint;
            manager_gora_share: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "configure_settings"), { manager_address: args.manager_address, manager_algo_share: args.manager_algo_share, manager_gora_share: args.manager_gora_share }, txnParams, atc);
        },
        withdraw_non_stake: async (args: {
            vesting_on_behalf_of: string;
            goracle_token_reference: bigint;
            main_app_reference: bigint;
            manager_reference: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this._addMethodCall(algosdk.getMethodByName(this.methods, "withdraw_non_stake"), { vesting_on_behalf_of: args.vesting_on_behalf_of, goracle_token_reference: args.goracle_token_reference, main_app_reference: args.main_app_reference, manager_reference: args.manager_reference }, txnParams, atc);
        }
    };
}
