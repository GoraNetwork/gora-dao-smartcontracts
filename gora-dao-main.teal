// Gora DAO Smart Contract
// Version 1
// Website: https://www.gora.io/
// Creators: @emg110.algo
// Github: https://github.com/GoraNetwork/gora-dao-smartcontracts

#pragma version 8
//Check TXN first
callsub sub_check_txn

// Check creation TXN
txn ApplicationID

bz branch_create

// Checking onCompletion type for update application call
txn OnCompletion
int UpdateApplication
==
bnz branch_update

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
bnz branch_delete

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
bnz branch_error

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz branch_error

// Checks the number of application args , if 0 then no method it is
txn NumAppArgs

int 0
==
bz branch_method_router
b branch_error

check_owner_auth:

	txn Sender
	global CreatorAddress
	==
	assert
	retsub

branch_create:
	
	byte "manager_address"
	txn Sender
	app_global_put

	byte "total_proposals_count"
	int 0
	app_global_put

	byte "ready_proposals_count"
	int 0
	app_global_put

	byte "active_proposals_count"
	int 0
	app_global_put

    byte "passed_proposals_count"
	int 0
	app_global_put

	byte "total_votes_count"
	int 0
	app_global_put

	int 1
	return

branch_delete:

	callsub check_owner_auth

	int 1
	return

branch_update:

	callsub check_owner_auth

	global CurrentApplicationID
	store 1

	int 1
	return



branch_method_router:

	method "config_dao(pay,uint64,uint64,uint64,uint64,uint64)uint64"
	txn ApplicationArgs 0
	==
	bnz method_config_dao

	method "write_source_box(byte[],byte[])string"
	txn ApplicationArgs 0
	==
	bnz method_write_source_box

	method "create_proposal(pay,account,asset,asset,uint64,string,string)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_create

	method "update_proposal(pay,application,uint64,address,uint64,string,string)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_update

	method "config_proposal(pay,axfer)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_config

    method "subscribe_dao(pay,asset,account,address)uint64"
	txn ApplicationArgs 0
	==
	bnz method_subscribe_dao

    method "unsubscribe_dao(asset,account,address)uint64"
	txn ApplicationArgs 0
	==
	bnz method_unsubscribe_dao

    method "proposal_participate(pay,axfer)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_participate

    method "proposal_withdraw_participate(asset,account,application)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_withdraw_participate

    method "proposal_vote(pay,axfer,asset,account,application,uint64)uint64"
	txn ApplicationArgs 0
	==
	bnz method_proposal_vote

	b branch_error

sub_check_txn:

	// Checks RekeyTo address transaction field to be empty (ZeroAddress)
	txn RekeyTo

	global ZeroAddress
	==
	assert

	// Checks CloseRemainderTo address transaction field to be empty (ZeroAddress)
	txn CloseRemainderTo

	global ZeroAddress
	==
	assert

	// Checks AssetCloseTo address transaction field to be empty (ZeroAddress)
	txn AssetCloseTo

	global ZeroAddress
	==
	assert

	// Check transaction type to be application call
	txn TypeEnum

	int appl
	==
	assert

	// Checking transaction fee
	txn Fee

	global MinTxnFee
	>=
	assert
	retsub

sub_check_owner_auth:

	txn Sender
	global CreatorAddress
	==
	assert
	retsub
// Handles configuration of GoraDAO
method_config_dao:
    txna Accounts 0
	store 1
	byte "manager_address"
	load 1
	app_global_put

	txna Assets 0
	store 2
	byte "dao_asset_id"
	load 2
	app_global_put
	

    txn ApplicationArgs 2
    btoi
	store 3
	byte "proposal_fee_stake"
    load 3
    app_global_put

    txn ApplicationArgs 3
    btoi
	store 4
	byte "proposal_fee_algo"
    load 4
    app_global_put

    txn ApplicationArgs 4
    btoi
	store 6
	byte "min_subscription_algo"
    load 6
    app_global_put
	
    txn ApplicationArgs 5
    btoi
	store 7
	byte "min_subscription_stake"
    load 7
    app_global_put


	itxn_begin
	global CurrentApplicationAddress
	itxn_field Sender
	int axfer
	itxn_field TypeEnum
	global CurrentApplicationAddress
	itxn_field AssetReceiver
	int 0
	itxn_field AssetAmount
	txna Assets 0
	itxn_field XferAsset
	itxn_submit
	

	byte 0x151f7c75
	txna Assets 0
	itob
	concat
	b branch_log_return

method_subscribe_dao:
    txna Accounts 0
    store 0
    // Checking Transaction group
    global GroupSize
    int 2
    ==
    assert
    // Checking the pay txn at index 0 of gtxn
    gtxn 0 RekeyTo
    global ZeroAddress
    ==
    assert
    gtxn 0 CloseRemainderTo
    global ZeroAddress
    ==
    assert
    gtxn 0 AssetCloseTo
    global ZeroAddress
    ==
    assert
    gtxn 0 TypeEnum
    int pay
    ==
    assert
    gtxn 0 Fee
    global MinTxnFee
    >=
    assert

    gtxn 0 Amount
    byte "min_subscription_stake"
    app_global_get
    >=
    assert

    // Checking if the receiver of pay txn is the same as the current application address
  
    gtxn 0 Receiver
    global CurrentApplicationAddress
    ==
    assert

    gtxn 0 Amount
    global MinTxnFee
    int 2
    *
    >=
    assert
	
    load 0
    txna Assets 0
    asset_holding_get AssetBalance
    assert
    byte "min_subscription_stake"
    app_global_get
    >=
    assert

    load 0
    balance
    byte "min_subscription_algo"
    app_global_get
    >=

    load 0
    //dup
    //log
    box_get
    bnz branch_delete_member_box
    pop
    load 0
    byte ""
    box_put
    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

method_unsubscribe_dao:
    
    // Process Transaction args

	// Proposal participating memeber address
    txna Accounts 0
    store 1
    load 1
    //dup
    //log
    box_del
    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

method_write_source_box:

	callsub sub_check_owner_auth

	byte "proposal_app"
	store 1

	byte "proposal_clr"
	store 2

	load 1
	box_get
	bz branch_write_box_app

	load 1
	box_del
	pop
	load 2
	box_del
	pop

branch_write_box_app:

	load 1
	txn ApplicationArgs 1
	box_put
	load 2
	txn ApplicationArgs 2
	box_put
	byte 0x151f7c75
	byte "GoraDAO Teal Source Codes Updated!"
	concat
	b branch_log_return

// Handles ABI method call for contract to contract creation of a Proposal contract
method_proposal_create:

  	// Checking Transaction group
    global GroupSize
    int 2
    ==
    assert
    // Checking the pay txn at index 0 of gtxn
    gtxn 0 RekeyTo
    global ZeroAddress
    ==
    assert
    gtxn 0 CloseRemainderTo
    global ZeroAddress
    ==
    assert
    gtxn 0 AssetCloseTo
    global ZeroAddress
    ==
    assert
    gtxn 0 TypeEnum
    int pay
    ==
    assert
    gtxn 0 Fee
    global MinTxnFee
    >=
    assert
    gtxn 0 Amount
    global MinTxnFee
    >=
    assert
    // Checking if the receiver of pay txn is the same as the current application address
    txn GroupIndex
    int 1
    -
    dup
    gtxn 0 Receiver
    global CurrentApplicationAddress
    ==
    assert

    gtxn 0 Amount
    byte "proposal_fee_algo"
    app_global_get
    //dup
    //itob
    //log
    >=
    assert

    // Process Transaction args

    // Proposal manager address
    txna Accounts 0
    store 1

    // Proposal asset id
    txn ApplicationArgs 1
    btoi
    store 2

    // Proposal title
    txn ApplicationArgs 2
    store 3

    // Proposal description
    txn ApplicationArgs 3
    store 4


    // Checks on Proposal create
    // Check Proposal manager Dao subscription (using a manager account box ref existing)
    txna Accounts 0
    box_get
    assert
    pop
    // Check Proposal manager Dao asset optin
    txna Accounts 0
    txna Assets 0
    asset_holding_get AssetBalance
    assert
    pop
    // Check Proposal manager Proposal asset optin
    txna Accounts 0
    txna Assets 1
    asset_holding_get AssetBalance
    assert
    pop

    // Inner transaction to create the Proposal smart contract
    itxn_begin
    // itxn Type to "appl"
    int appl
    itxn_field TypeEnum
    // itxn OnCompletion
    int NoOp
    itxn_field OnCompletion

    // itxn 
    int 15
    itxn_field GlobalNumByteSlice
    int 20
    itxn_field GlobalNumUint
    int 0
    itxn_field LocalNumUint
    int 0
    itxn_field LocalNumByteSlice
    txn Sender
    itxn_field Note
    method "create_proposal(application,uint64,uint64,address,address,string,string)address"
    itxn_field ApplicationArgs
    byte "proposal_app"
    box_get
    bz branch_error
    dup
    len
    int 2
    swap
    substring3
    itxn_field ApprovalProgram
    
    byte "proposal_clr"
    box_get
    bz branch_error
    dup
    len
    int 2
    swap
    substring3
    itxn_field ClearStateProgram
    global CurrentApplicationID
    itob
    itxn_field ApplicationArgs
    byte "dao_asset_id"
    app_global_get
	itob
    itxn_field ApplicationArgs
    load 2
    itob
    itxn_field ApplicationArgs
    load 1
    itxn_field ApplicationArgs
    byte "manager_address"
	app_global_get
    itxn_field ApplicationArgs
    load 3
    itxn_field ApplicationArgs
    load 4
    itxn_field ApplicationArgs
    itxn_submit
    //itxn TxID
    //log
	itxn LastLog
	extract 4 0
    store 10
    load 10
    //dup
    //log
    global ZeroAddress
    !=
    load 10 
    len
    int 32
    ==
    &&
    assert

    itxn CreatedApplicationID
    store 9
    byte "total_proposals_count"
    dup
    app_global_get
    int 1
    +
    app_global_put

 	itxn_begin
	global CurrentApplicationAddress
	itxn_field Sender
	int pay
	itxn_field TypeEnum
	load 10
	itxn_field Receiver
	int 400000
	itxn_field Amount
	itxn_submit
	//itxn TxID
    //log

    //itxn_begin
    //method "optin_proposal_asset(asset,uint64)uint64"
    //itxn_field ApplicationArgs
    //int appl
	//itxn_field TypeEnum
    //int NoOp
    //itxn_field OnCompletion
    //load 9
	//itxn_field ApplicationID
    //global CurrentApplicationAddress
	//itxn_field Sender
    //txna Assets 0
    //itxn_field Assets
    //txna Assets 1
    //itxn_field Assets
    //load 2
    //itob
    //dup
    //itxn_field ApplicationArgs
    //itxn_field ApplicationArgs
	//itxn_submit

	//itxn TxID
    //log
	itxn LastLog
	//extract 4 0
    //store 11
    //load 11
    log
	
	byte 0x151f7c75
	load 9
	itob
	concat
	b branch_log_return

// Handles ABI method call for contract to contract update of a Proposal contract
method_proposal_update:

	// Checking Transaction group
    global GroupSize
    int 2
    ==
    assert
    // Checking the pay txn at index 0 of gtxn
    gtxn 0 RekeyTo
    global ZeroAddress
    ==
    assert
    gtxn 0 CloseRemainderTo
    global ZeroAddress
    ==
    assert
    gtxn 0 AssetCloseTo
    global ZeroAddress
    ==
    assert
    gtxn 0 TypeEnum
    int pay
    ==
    assert
    gtxn 0 Fee
    global MinTxnFee
    >=
    assert
    gtxn 0 Amount
    global MinTxnFee
    >=
    assert
    // Checking if the receiver of pay txn is the same as the current application address
    txn GroupIndex
    int 1
    -
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert

    gtxns Amount
    global MinTxnFee
    int 2
    *
    >=
    assert
	
    // Process Transaction args
	// Proposal app id
    txn ApplicationArgs 2
	btoi
    store 0
    // Proposal manager address
    txn ApplicationArgs 3
    store 1
    // Proposal asset id
    txn ApplicationArgs 4
    store 2
    // Proposal title
    txn ApplicationArgs 5
    store 3
    // Proposal description
    txn ApplicationArgs 6
    store 4

    // Inner transaction to create the Proposal smart contract
    itxn_begin
    // itxn Type to "appl"
    int appl
    itxn_field TypeEnum
    // itxn OnCompletion
    int UpdateApplication
    itxn_field OnCompletion
	// itxn ApplicationID
    load 0
    itxn_field ApplicationID
    // itxn 
    txn Sender
    itxn_field Note
    method "update_proposal(application,uint64,uint64,address,address,string,string)address"
    itxn_field ApplicationArgs
    byte "proposal_app"
    box_get
    bz branch_error
    dup
    len
    int 2
    swap
    substring3
    itxn_field ApprovalProgram
    
    byte "proposal_clr"
    box_get
    bz branch_error
    dup
    len
    int 2
    swap
    substring3
    itxn_field ClearStateProgram
    global CurrentApplicationID
    itob
    itxn_field ApplicationArgs
    byte "dao_asset_id"
    app_global_get
	itob
    itxn_field ApplicationArgs
	// Proposal asset id
    load 2
    itxn_field ApplicationArgs
	// Proposal manager address
    load 1
    itxn_field ApplicationArgs
    byte "manager_address"
	app_global_get
    itxn_field ApplicationArgs
	// Proposal title
    load 3
    itxn_field ApplicationArgs
	// Proposal description
    load 4
    itxn_field ApplicationArgs
    
    
    itxn_submit
    //itxn TxID
    //log
    //itxn LastLog
	//extract 4 0
    //log


	byte 0x151f7c75
	load 0
	itob
	concat
	b branch_log_return

method_proposal_config:
	// Checking Transaction group
    global GroupSize
    int 5
    ==
    assert
    // Checking the pay txn at index 0 of gtxn
    gtxn 0 RekeyTo
    global ZeroAddress
    ==
    gtxn 2 RekeyTo
    global ZeroAddress
    ==
    &&
    assert

    gtxn 0 CloseRemainderTo
    global ZeroAddress
    ==
    assert

    gtxn 2 CloseRemainderTo
    global ZeroAddress
    ==

    assert

  
    gtxn 3 AssetCloseTo
    global ZeroAddress
    ==
    assert

    gtxn 0 TypeEnum
    int pay
    ==
    gtxn 2 TypeEnum
    int pay
    ==
    &&
    assert

    gtxn 0 Fee
    global MinTxnFee
    >=
    gtxn 2 Fee
    global MinTxnFee
    >=
    &&
    assert

 

    // Checking if the receiver of pay txn is the same as the current application address
  
    gtxn 2 Receiver
    global CurrentApplicationAddress
    ==
    assert

    gtxn 3 AssetReceiver
    global CurrentApplicationAddress
    ==
    assert

    gtxn 0 Amount
    int 3000
    >=
    assert

    gtxn 2 Amount
    byte "proposal_fee_algo"
    app_global_get
    >=
    assert
	
    gtxn 3 AssetAmount
    byte "proposal_fee_stake"
    app_global_get
    >=
    assert

    txna Accounts 0
    store 1
    load 1
    //log
    // Proposal app id
    txna Applications 1
	//btoi
    store 2
    load 2
    //itob
    //log

    // Proposal app address
    txna Applications 1
    store 3
    //load 3
    //log

    // Proposal asset id
    txna Assets 1
    //btoi
    store 4
    load 4
    //itob
    //log

    // Checks on Proposal config 
    // Check Proposal manager Dao subscription (using a manger account box ref existing)
    txna Accounts 0
    box_get
    assert
    pop
    // Check Proposal manager Dao asset optin
    txna Accounts 0
    txna Assets 0
    asset_holding_get AssetBalance
    assert
    pop
    // Check Proposal manager Proposal asset optin
    txna Accounts 0
    txna Assets 1
    asset_holding_get AssetBalance
    assert
    pop

    itxn_begin
	global CurrentApplicationAddress
	itxn_field Sender
	int axfer
	itxn_field TypeEnum
	global CurrentApplicationAddress
	itxn_field AssetReceiver
	int 0
	itxn_field AssetAmount
	txna Assets 1
	itxn_field XferAsset
	itxn_submit
	itxn TxID
    log
    // Creating Proposal box, adding proposal id to dao_proposals_list box! Proposal box with proposal id as key
    // contains 32 byte proposal address followed by 32 bytes proposal manager address
    txna Accounts 0
    box_get
    bnz branch_delete_proposal_box
    load 2
    itob
    load 1
    load 3
    itob
    concat
    box_put

	byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

branch_delete_member_box:
    load 0
    box_del
    pop
    load 0
    byte ""
    box_put
    

    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

branch_delete_proposal_box:
    txna Accounts 0
    box_del
    pop

    txna Accounts 0
    load 1
    load 3
    itob
    concat
    box_put

    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

method_proposal_participate:
    txna Accounts 0
    store 0

    txna Applications 1
    byte "proposal_min_participation_algo"
    app_global_get_ex
    assert
    store 1

    txna Applications 1
    byte "proposal_min_participation_stake"
    app_global_get_ex
    assert
    store 2

    // Checking Transaction group
    global GroupSize
    int 5
    ==
    assert

    // Checking the pay and axfer txns at index 0 and 1 of gtxn
    gtxn 0 RekeyTo
    global ZeroAddress
    ==
    assert

    gtxn 1 RekeyTo
    global ZeroAddress
    ==
    assert

    gtxn 0 CloseRemainderTo
    global ZeroAddress
    ==
    assert

    gtxn 1 CloseRemainderTo
    global ZeroAddress
    ==
    assert

    gtxn 0 AssetCloseTo
    global ZeroAddress
    ==
    assert

    gtxn 1 AssetCloseTo
    global ZeroAddress
    ==
    assert

    gtxn 0 TypeEnum
    int pay
    ==
    assert
   
    gtxn 1 TypeEnum
    int axfer
    ==
    assert

    gtxn 0 Fee
    global MinTxnFee
    >=
    assert

    gtxn 1 Fee
    global MinTxnFee
    >=
    assert

    gtxn 0 Amount
    load 1
    >=
    assert

    gtxn 1 AssetAmount
    load 2
    ==
    assert

    gtxn 0 Receiver
    global CurrentApplicationAddress
    ==
    assert

    gtxn 1 AssetReceiver
    global CurrentApplicationAddress
    ==
    assert


    // Checking the asset ref to be DAO asset
    byte "dao_asset_id"
    app_global_get
    txna Assets 0
    assert
  
    load 0
    txna Assets 0
    asset_holding_get AssetBalance
    assert

    load 0
    box_get
    assert
    pop

    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return


method_proposal_withdraw_participate:

    txna Accounts 0
    store 0

    txna Applications 1
    byte "proposal_min_participation_algo"
    app_global_get_ex
    assert
    store 1

    txna Applications 1
    byte "proposal_min_participation_stake"
    app_global_get_ex
    assert
    store 2


    // Checking account ref to be Sender
    load 0
    txn Sender
    ==
    assert

    itxn_begin
	global CurrentApplicationAddress
	itxn_field Sender
	int pay
	itxn_field TypeEnum
	load 0
	itxn_field Receiver
	load 1
	itxn_field Amount
	itxn_submit
	//itxn TxID
    //log

    itxn_begin
	global CurrentApplicationAddress
	itxn_field Sender
	int axfer
	itxn_field TypeEnum
    txna Assets 0
    itxn_field XferAsset
	load 0
	itxn_field AssetReceiver
	load 2
	itxn_field AssetAmount
	itxn_submit
	//itxn TxID
    //log

    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return


method_proposal_vote:
    txna Accounts 0
    store 0

    txna Applications 1
    byte "proposal_min_vote_fee"
    app_global_get_ex
    assert
    store 1

    txna Applications 1
    byte "proposal_min_vote_fee_algo"
    app_global_get_ex
    assert
    store 2


    // Checking Transaction group
    global GroupSize
    int 5
    ==
    assert

    // Checking the pay and axfer txns at index 0 and 1 of gtxn
    gtxn 0 RekeyTo
    global ZeroAddress
    ==
    assert

    gtxn 1 RekeyTo
    global ZeroAddress
    ==
    assert

    gtxn 0 CloseRemainderTo
    global ZeroAddress
    ==
    assert

    gtxn 1 CloseRemainderTo
    global ZeroAddress
    ==
    assert

    gtxn 0 AssetCloseTo
    global ZeroAddress
    ==
    assert

    gtxn 1 AssetCloseTo
    global ZeroAddress
    ==
    assert


    gtxn 0 TypeEnum
    int pay
    ==
    assert
   

    gtxn 1 TypeEnum
    int axfer
    ==
    assert


    gtxn 0 Fee
    global MinTxnFee
    >=
    assert

    gtxn 1 Fee
    global MinTxnFee
    >=
    assert


    gtxn 0 Amount
    load 2
    >=
    assert

    gtxn 1 AssetAmount
    load 1
    ==
    assert

  
    gtxn 0 Receiver
    global CurrentApplicationAddress
    ==
    assert

    gtxn 1 AssetReceiver
    global CurrentApplicationAddress
    ==
    assert


    // Checking account ref to be Sender
    load 0
    txn Sender
    ==
    assert

    // Checking the asset ref to be DAO asset
    byte "dao_asset_id"
    app_global_get
    txna Assets 0
    assert
  
    // Check DAO asset holdings
    load 0
    txna Assets 0
    asset_holding_get AssetBalance
    assert
    pop

    // Check subscription
    load 0
    box_get
    assert
    pop
    

	
    byte 0x151f7c75
	global CurrentApplicationID
	itob
	concat
	b branch_log_return

branch_error:

	err

// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
branch_log_return:

	log

	int 1
	return

