// Gora DAO Smart Contract
// Version 1

// Website: https://www.gora.io/

// Creators: @emg110.algo
// Github: https://github.com/GoracleNetwork/gora-dao-smartcontracts

#pragma version 8
intcblock 0 1 32 4 576
bytecblock 0x 0x6d61 0x00 0x6d7873 0x6d6e7466 0x6d787466 0x01 0xb3b80c39a0d48da5ca41c6fdc0ecc6706b28c22c45d6ad8f6351c990ac353785 0x02
//handling standards calls (0 args)
txn NumAppArgs
intc_0 // 0
==
bnz branch_op_calls
txn OnCompletion
intc_0 // NoOp
==
assert

// Method router

// Detect method_create
txna ApplicationArgs 0
pushbytes 0xa8d36585 // "create(address,uint64,uint64,uint64)void"
==
bnz method_create

txn ApplicationID
intc_0 // 0
!=
assert
// Detect method_update_time_constraints
txna ApplicationArgs 0
pushbytes 0xa8febdb1 // "update_time_constraints(uint64,uint64,uint64)void"
==
bnz method_update_time_constraints

// Detect update_manager_address
txna ApplicationArgs 0
pushbytes 0x04edf7c7 // "update_manager_address(address)void"
==
bnz method_update_manager_address

// Detect method_optin_asset
txna ApplicationArgs 0
pushbytes 0x3c197d18 // "optin_asset(pay,asset,application,address)void"
==
bnz method_optin_asset

// Detect method_vest_tokens
txna ApplicationArgs 0
pushbytes 0x58763d91 // "vest_tokens(pay,axfer,address,uint64,uint64)void"
==
bnz method_vest_tokens

// Detect method_claim_vesting
txna ApplicationArgs 0
pushbytes 0xcb968c95 // "claim_vesting(account,asset)void"
==
bnz method_claim_vesting

// Detect method_stake_to_delegator
txna ApplicationArgs 0
pushbytes 0x8ad487c2 // "stake_to_delegator(application,address,application,asset,account)void"
==
bnz method_stake_to_delegator

// Detect method_withdraw_from_delegator
txna ApplicationArgs 0
pushbytes 0x757a7f32 // "withdraw_from_delegator(application,address,application,asset,account)void"
==
bnz method_withdraw_from_delegator

// Detect method_add_whitelisted_app
txna ApplicationArgs 0
pushbytes 0x76ef2184 // "add_whitelisted_app(pay,application)void"
==
bnz method_add_whitelisted_app

// Detect method_remove_whitelisted_app
txna ApplicationArgs 0
pushbytes 0x5d3fa23b // "remove_whitelisted_app(application)void"
==
bnz method_remove_whitelisted_app

err

// Branches

// App Op calls router : Handles optin, update and delete calls
branch_op_calls:
txn ApplicationID
intc_0
!=
assert
// Optin call
txn OnCompletion
intc_1 // OptIn
==
bnz branch_optin
// Update call
txn OnCompletion
intc_3 // UpdateApplication
==
bnz branch_update
// Delete call
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz branch_delete

err
// End of stanbdard calls router

// Branch: Delete
branch_delete:
intc_0 // 0
return

// Branch: Update
branch_update:
intc_0 // 0
return

// Branch: Optin
branch_optin:
intc_0 // 0
return

// Methods

// Method: Remove Whitelisted App
method_remove_whitelisted_app:
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub subroutine_remove_whitelisted_app
intc_1 // 1
return

// Method: Add Whitelisted App
method_add_whitelisted_app:
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 29
txn GroupIndex
intc_1 // 1
-
store 28
load 28
gtxns TypeEnum
intc_1 // pay
==
assert
load 28
load 29
callsub subroutine_add_whitelisted_app
intc_1 // 1
return

// Method: Withdraw from delegator
method_withdraw_from_delegator:
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 23
txna ApplicationArgs 2
store 24
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 25
txna ApplicationArgs 4
intc_0 // 0
getbyte
store 26
txna ApplicationArgs 5
intc_0 // 0
getbyte
store 27
load 23
load 24
load 25
load 26
load 27
callsub subroutine_withdraw_from_delegator
intc_1 // 1
return

// Method: Stake to delegator
method_stake_to_delegator:
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 18
txna ApplicationArgs 2
store 19
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 20
txna ApplicationArgs 4
intc_0 // 0
getbyte
store 21
txna ApplicationArgs 5
intc_0 // 0
getbyte
store 22
load 18
load 19
load 20
load 21
load 22
callsub subroutine_stake_to_delegator
intc_1 // 1
return

// Method: Claim Vesting
method_claim_vesting:
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 16
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 17
load 16
load 17
callsub subroutine_claim_vesting
intc_1 // 1
return

// Method: Vest Tokens
method_vest_tokens:
txna ApplicationArgs 1
store 13
txna ApplicationArgs 2
btoi
store 14
txna ApplicationArgs 3
btoi
store 15
txn GroupIndex
pushint 2 // 2
-
store 11
load 11
gtxns TypeEnum
intc_1 // pay
==
assert
txn GroupIndex
intc_1 // 1
-
store 12
load 12
gtxns TypeEnum
intc_3 // axfer
==
assert
load 11
load 12
load 13
load 14
load 15
callsub subroutine_vest_tokens
intc_1 // 1
return

// Method: Optin Asset
method_optin_asset:
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 8
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 9
txna ApplicationArgs 3
store 10
txn GroupIndex
intc_1 // 1
-
store 7
load 7
gtxns TypeEnum
intc_1 // pay
==
assert
load 7
load 8
load 9
load 10
callsub subroutine_optin_asset
intc_1 // 1
return

// Method: Update Manager Address
method_update_manager_address:
txna ApplicationArgs 1
callsub subroutine_update_manager_address
intc_1 // 1
return

//Method: Update Time Constraints
method_update_time_constraints:
txna ApplicationArgs 1
btoi
store 4
txna ApplicationArgs 2
btoi
store 5
txna ApplicationArgs 3
btoi
store 6
load 4
load 5
load 6
callsub subroutine_update_time_constraints
intc_1 // 1
return

// Method: Create
method_create:
txn ApplicationID
intc_0 // 0
==
assert
txna ApplicationArgs 1 //manager_address
store 0
txna ApplicationArgs 2 //max_start
btoi
store 1
txna ApplicationArgs 3 //min_timeframe
btoi
store 2
txna ApplicationArgs 4 //max_timeframe
btoi
store 3
load 0
load 1
load 2
load 3
callsub subroutine_create
intc_1 // 1
return

// Subroutines

// Subroutine: Authrozie manager account (needs ma Auth)
subroutine_auth_manager_account:
txn Sender
bytec_1 // "ma"
app_global_get
==
assert
retsub


// Subroutine: Send assets
subroutine_send_asset:
proto 4 0
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig -4
itxn_field XferAsset
frame_dig -3
itxn_field AssetReceiver
frame_dig -2
itxn_field AssetAmount
frame_dig -1
itxn_field Fee
itxn_submit
retsub

// Subroutine: Sending Algos
subroutine_send_algo:
proto 3 0
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig -3
itxn_field Receiver
frame_dig -2
itxn_field Amount
frame_dig -1
itxn_field Fee
itxn_submit
retsub


// Subroutine: create
subroutine_create:
proto 4 0
bytec_3 // "mxs"
intc_0 // 0
app_global_put
bytec 4 // "mntf"
intc_0 // 0
app_global_put
bytec 5 // "mxtf"
intc_0 // 0
app_global_put
bytec_1 // "ma"
global CreatorAddress
app_global_put
frame_dig -4
global ZeroAddress
!=
assert
frame_dig -4
len
intc_2 // 32
==
assert
frame_dig -2
frame_dig -1
<=
assert
bytec_1 // "ma"
frame_dig -4
app_global_put
bytec_3 // "mxs"
frame_dig -3
app_global_put
bytec 4 // "mntf"
frame_dig -2
app_global_put
bytec 5 // "mxtf"
frame_dig -1
app_global_put
retsub

// Subroutine: Update Time Constraints (needs ma Auth)
subroutine_update_time_constraints:
proto 3 0
callsub subroutine_auth_manager_account
bytec_3 // "mxs"
frame_dig -3
app_global_put
bytec 4 // "mntf"
frame_dig -2
app_global_put
bytec 5 // "mxtf"
frame_dig -1
app_global_put
retsub

// Subroutine: Update Manager Address (needs ma Auth)
subroutine_update_manager_address:
proto 1 0
callsub subroutine_auth_manager_account
frame_dig -1
global ZeroAddress
!=
assert
frame_dig -1
len
intc_2 // 32
==
assert
bytec_1 // "ma"
frame_dig -1
app_global_put
retsub

// Subroutine: Optin Asset
subroutine_optin_asset:
proto 4 0
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
frame_dig -1
bytec 7 // 0xb3b80c39a0d48da5ca41c6fdc0ecc6706b28c22c45d6ad8f6351c990ac353785
==
assert
bytec 7 // 0xb3b80c39a0d48da5ca41c6fdc0ecc6706b28c22c45d6ad8f6351c990ac353785
frame_dig -3
txnas Assets
asset_holding_get AssetBalance
assert
frame_dig -3
txnas Assets
frame_bury 0
global CurrentApplicationAddress
frame_bury 1
// frame_dig 1
// len
// intc_2 // 32
// ==
// assert
frame_dig 1
min_balance
frame_bury 2
frame_dig 0
frame_dig 1
intc_0 // 0
intc_0 // 0
callsub subroutine_send_asset
frame_dig 1
min_balance
frame_dig 2
-
frame_bury 3
gtxns Amount
frame_dig 3
==
assert
intc_0  // 0
gtxns Receiver
global CurrentApplicationAddress
==
assert
retsub

// Subroutine vest tokens (needs ma Auth)
subroutine_vest_tokens:
proto 5 0
callsub subroutine_auth_manager_account
intc_0 // 0
dupn 2
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
intc_0 // 0
dup
//// Formerly here was misplaced subroutine_auth_manager_account , since it is a proto 0 0 moving to start of subroutine has no issues!
frame_dig -4
gtxns XferAsset
frame_bury 0
frame_dig -4
gtxns AssetAmount
frame_bury 1
frame_dig -2
global LatestTimestamp
>=
assert
frame_dig -2
global LatestTimestamp
bytec_3 // "mxs"
app_global_get
+
<=
assert
frame_dig -1
bytec 4 // "mntf"
app_global_get
>=
assert
frame_dig -1
bytec 5 // "mxtf"
app_global_get
<=
assert
frame_dig -2
frame_dig -1
+
frame_bury -1
intc_0 // 0
frame_bury 2
frame_dig -3
global ZeroAddress
!=
assert
frame_dig -3
len
intc_2 // 32
==
assert
bytec_1 // "ma"
app_global_get
frame_bury 3
frame_dig 3
len
intc_2 // 32
==
assert
intc_0 // 0
frame_bury 4
frame_dig -2
itob
frame_dig -1
itob
concat
frame_dig 0
itob
concat
frame_dig 1
itob
concat
frame_dig 2
itob
concat
frame_dig 3
concat
bytec_2 // 0x00
intc_0 // 0
frame_dig 4
setbit
concat
frame_bury 5
global CurrentApplicationAddress
min_balance
frame_bury 10
frame_dig -3
box_get
store 33
store 32
load 33
!
assert
frame_dig -3
box_del
pop
frame_dig -3
frame_dig 5
box_put
global CurrentApplicationAddress
min_balance
frame_dig 10
-
frame_bury 11
frame_dig -5
gtxns Amount
frame_dig 11
==
assert
frame_dig -5
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig -5
gtxns Receiver
global CurrentApplicationAddress
==
assert
frame_dig -5
gtxns CloseRemainderTo
global ZeroAddress
==
assert
frame_dig -5
gtxns RekeyTo
global ZeroAddress
==
assert
frame_dig -5
gtxns Lease
global ZeroAddress
==
assert
frame_dig -4
gtxns TypeEnum
intc_3 // axfer
==
assert
frame_dig -4
gtxns AssetReceiver
global CurrentApplicationAddress
==
assert
frame_dig -4
gtxns AssetSender
global ZeroAddress
==
assert
frame_dig -4
gtxns CloseRemainderTo
global ZeroAddress
==
assert
frame_dig -4
gtxns RekeyTo
global ZeroAddress
==
assert
frame_dig -4
gtxns Lease
global ZeroAddress
==
assert
frame_dig -4
gtxns AssetCloseTo
global ZeroAddress
==
assert
retsub

// Subroutine: Claim Vesting
subroutine_claim_vesting:
proto 2 0
bytec_0 // ""
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
dupn 5
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -2
txnas Accounts
global ZeroAddress
!=
assert
frame_dig -2
txnas Accounts
len
intc_2 // 32
==
assert
frame_dig -2
txnas Accounts
box_get
store 35
store 34
load 35
assert
frame_dig -2
txnas Accounts
box_get
store 37
store 36
load 37
assert
load 36
frame_bury 0
frame_dig 0
intc_0 // 0
extract_uint64
frame_bury 1
frame_dig 0
pushint 8 // 8
extract_uint64
frame_bury 2
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 3
frame_dig 0
pushint 16 // 16
extract_uint64
frame_bury 4
frame_dig 0
pushint 24 // 24
extract_uint64
frame_bury 5
frame_dig 0
extract 40 32
frame_bury 6
frame_dig 0
intc 4 // 576
getbit
frame_bury 7
global LatestTimestamp
frame_dig 1
>=
assert
frame_dig 6
global ZeroAddress
!=
assert
frame_dig 6
bytec_1 // "ma"
app_global_get
==
assert
frame_dig 7
intc_0 // 0
==
assert
intc_0 // 0
frame_bury 8
frame_dig 2
global LatestTimestamp
>
bnz subroutine_claim_vesting_l5
frame_dig 5
frame_dig 3
-
frame_bury 8

// Subroutine: Claim Vesting L2
subroutine_claim_vesting_l2:
frame_dig 4
frame_dig -2
txnas Accounts
frame_dig 8
intc_0 // 0
callsub subroutine_send_asset
frame_dig 3
frame_dig 8
+
frame_dig 5
==
bnz subroutine_claim_vesting_l4
frame_dig 3
frame_dig 8
+
frame_bury 3
frame_dig 1
itob
frame_dig 2
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 3
itob
concat
frame_dig 6
concat
bytec_2 // 0x00
intc_0 // 0
frame_dig 7
setbit
concat
frame_bury 13
frame_dig -2
txnas Accounts
box_del
pop
frame_dig -2
txnas Accounts
frame_dig 13
box_put
retsub

// Subroutine: Claim Vesting L4
subroutine_claim_vesting_l4:
global CurrentApplicationAddress
min_balance
frame_bury 11
frame_dig -2
txnas Accounts
box_del
pop
frame_dig 11
global CurrentApplicationAddress
min_balance
-
frame_bury 12
frame_dig 6
frame_dig 12
global MinTxnFee
-
intc_0 // 0
callsub subroutine_send_algo
retsub

// Subroutine: Claim Vesting L5
subroutine_claim_vesting_l5:
frame_dig 2
frame_dig 1
-
frame_bury 9
global LatestTimestamp
frame_dig 1
-
frame_bury 10
frame_dig 5
frame_dig 10
mulw
intc_0 // 0
frame_dig 9
divmodw
pop
pop
swap
!
assert
frame_dig 3
-
frame_bury 8
b subroutine_claim_vesting_l2



// Subroutine: Stake to delegator
subroutine_stake_to_delegator:
proto 5 0
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -4
txn Sender
==
assert
frame_dig -5
txnas Applications
app_params_get AppAddress
store 39
store 38
load 39
assert
frame_dig -5
txnas Applications
frame_bury 0
frame_dig 0
itob
box_get
store 41
store 40
load 41
assert
frame_dig -4
box_get
store 43
store 42
load 43
assert
load 42
frame_bury 1
frame_dig 1
intc_0 // 0
extract_uint64
frame_bury 2
frame_dig 1
pushint 8 // 8
extract_uint64
frame_bury 3
frame_dig 1
pushint 16 // 16
extract_uint64
frame_bury 4
frame_dig 1
pushint 24 // 24
extract_uint64
frame_bury 5
frame_dig 1
intc_2 // 32
extract_uint64
frame_bury 6
frame_dig 1
extract 40 32
frame_bury 7
frame_dig 1
intc 4 // 576
getbit
frame_bury 8
frame_dig 7
global ZeroAddress
!=
assert
frame_dig 8
intc_0 // 0
==
assert
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig 5
frame_dig 6
-
itxn_field AssetAmount
frame_dig 4
itxn_field XferAsset
load 38
itxn_field AssetReceiver
itxn_next
pushint 6 // appl
itxn_field TypeEnum
frame_dig -5
txnas Applications
itxn_field ApplicationID
txn Sender
itxn_field Accounts
frame_dig -1
txnas Accounts
itxn_field Accounts
frame_dig -3
txnas Applications
itxn_field Applications
frame_dig -2
txnas Assets
itxn_field Assets
pushbytes 0x230b8ca4 // "stake(axfer,account,application,asset,account)void"
itxn_field ApplicationArgs
bytec 6 // 0x01
itxn_field ApplicationArgs
bytec 6 // 0x01
itxn_field ApplicationArgs
bytec_2 // 0x00
itxn_field ApplicationArgs
bytec 8 // 0x02
itxn_field ApplicationArgs
intc_0 // 0
itxn_field Fee
itxn_submit
intc_1 // 1
frame_bury 8
frame_dig 2
itob
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 7
concat
bytec_2 // 0x00
intc_0 // 0
frame_dig 8
setbit
concat
frame_bury 9
frame_dig -4
box_del
pop
frame_dig -4
frame_dig 9
box_put
retsub

// Subroutine: Withdraw from delegator
subroutine_withdraw_from_delegator:
proto 5 0
bytec_0 // ""
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -4
txn Sender
==
assert
frame_dig -4
box_get
store 45
store 44
load 45
assert
load 44
frame_bury 0
frame_dig 0
intc_0 // 0
extract_uint64
frame_bury 1
frame_dig 0
pushint 8 // 8
extract_uint64
frame_bury 2
frame_dig 0
pushint 16 // 16
extract_uint64
frame_bury 3
frame_dig 0
pushint 24 // 24
extract_uint64
frame_bury 4
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 5
frame_dig 0
extract 40 32
frame_bury 6
frame_dig 0
intc 4 // 576
getbit
frame_bury 7
frame_dig 6
global ZeroAddress
!=
assert
frame_dig 7
intc_1 // 1
==
assert
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
frame_dig -5
txnas Applications
itxn_field ApplicationID
txn Sender
itxn_field Accounts
frame_dig -1
txnas Accounts
itxn_field Accounts
frame_dig -3
txnas Applications
itxn_field Applications
frame_dig -2
txnas Assets
itxn_field Assets
pushbytes 0xd0c26eac // "withdraw_non_stake(account,asset,application,account)void"
itxn_field ApplicationArgs
bytec 6 // 0x01
itxn_field ApplicationArgs
bytec_2 // 0x00
itxn_field ApplicationArgs
bytec 6 // 0x01
itxn_field ApplicationArgs
bytec 8 // 0x02
itxn_field ApplicationArgs
intc_0 // 0
itxn_field Fee
itxn_submit
intc_0 // 0
frame_bury 7
frame_dig 1
itob
frame_dig 2
itob
concat
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
concat
bytec_2 // 0x00
intc_0 // 0
frame_dig 7
setbit
concat
frame_bury 8
frame_dig -4
box_del
pop
frame_dig -4
frame_dig 8
box_put
retsub

// Subroutine: Add Whitelisted App (needs ma Auth)
subroutine_add_whitelisted_app:
proto 2 0
intc_0 // 0
dupn 2
callsub subroutine_auth_manager_account
global CurrentApplicationAddress
min_balance
frame_bury 0
frame_dig -1
txnas Applications
frame_bury 1
frame_dig 1
itob
bytec_0 // ""
box_put
global CurrentApplicationAddress
min_balance
frame_dig 0
-
frame_bury 2
frame_dig -2
gtxns Receiver
global CurrentApplicationAddress
==
assert
frame_dig -2
gtxns Amount
frame_dig 2
==
assert
retsub

// Subroutine: Remove whitelisted app (needs ma Auth)
subroutine_remove_whitelisted_app:
proto 1 0
intc_0 // 0
dupn 2
callsub subroutine_auth_manager_account
global CurrentApplicationAddress
min_balance
frame_bury 0
frame_dig -1
txnas Applications
frame_bury 1
frame_dig 1
itob
box_get
store 47
store 46
load 47
assert
frame_dig 1
itob
box_del
assert
frame_dig 0
global CurrentApplicationAddress
min_balance
-
frame_bury 2
bytec_1 // "ma"
app_global_get
frame_dig 2
intc_0 // 0
callsub subroutine_send_algo
retsub







